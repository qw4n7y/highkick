// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package models

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type schedulerTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *schedulerTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("highkick_schedulers").
func (v *schedulerTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *schedulerTableType) Columns() []string {
	return []string{
		"id",
		"job_type",
		"job_input",
		"scheduler_type",
		"run_every_seconds",
		"exact_times",
		"stopped",
		"updated_at",
		"last_run_at",
		"last_error",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *schedulerTableType) NewStruct() reform.Struct {
	return new(Scheduler)
}

// NewRecord makes a new record for that table.
func (v *schedulerTableType) NewRecord() reform.Record {
	return new(Scheduler)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *schedulerTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// SchedulerTable represents highkick_schedulers view or table in SQL database.
var SchedulerTable = &schedulerTableType{
	s: parse.StructInfo{
		Type:    "Scheduler",
		SQLName: "highkick_schedulers",
		Fields: []parse.FieldInfo{
			{Name: "ID", Type: "int", Column: "id"},
			{Name: "JobType", Type: "string", Column: "job_type"},
			{Name: "JobInput", Type: "string", Column: "job_input"},
			{Name: "SchedulerType", Type: "SchedulerType", Column: "scheduler_type"},
			{Name: "RunEverySeconds", Type: "int", Column: "run_every_seconds"},
			{Name: "ExactTimes", Type: "database.StringList", Column: "exact_times"},
			{Name: "Stopped", Type: "bool", Column: "stopped"},
			{Name: "UpdatedAt", Type: "time.Time", Column: "updated_at"},
			{Name: "LastRunAt", Type: "*time.Time", Column: "last_run_at"},
			{Name: "LastError", Type: "string", Column: "last_error"},
		},
		PKFieldIndex: 0,
	},
	z: new(Scheduler).Values(),
}

// String returns a string representation of this struct or record.
func (s Scheduler) String() string {
	res := make([]string, 10)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "JobType: " + reform.Inspect(s.JobType, true)
	res[2] = "JobInput: " + reform.Inspect(s.JobInput, true)
	res[3] = "SchedulerType: " + reform.Inspect(s.SchedulerType, true)
	res[4] = "RunEverySeconds: " + reform.Inspect(s.RunEverySeconds, true)
	res[5] = "ExactTimes: " + reform.Inspect(s.ExactTimes, true)
	res[6] = "Stopped: " + reform.Inspect(s.Stopped, true)
	res[7] = "UpdatedAt: " + reform.Inspect(s.UpdatedAt, true)
	res[8] = "LastRunAt: " + reform.Inspect(s.LastRunAt, true)
	res[9] = "LastError: " + reform.Inspect(s.LastError, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Scheduler) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.JobType,
		s.JobInput,
		s.SchedulerType,
		s.RunEverySeconds,
		s.ExactTimes,
		s.Stopped,
		s.UpdatedAt,
		s.LastRunAt,
		s.LastError,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Scheduler) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.JobType,
		&s.JobInput,
		&s.SchedulerType,
		&s.RunEverySeconds,
		&s.ExactTimes,
		&s.Stopped,
		&s.UpdatedAt,
		&s.LastRunAt,
		&s.LastError,
	}
}

// View returns View object for that struct.
func (s *Scheduler) View() reform.View {
	return SchedulerTable
}

// Table returns Table object for that record.
func (s *Scheduler) Table() reform.Table {
	return SchedulerTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Scheduler) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Scheduler) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Scheduler) HasPK() bool {
	return s.ID != SchedulerTable.z[SchedulerTable.s.PKFieldIndex]
}

// SetPK sets record primary key, if possible.
//
// Deprecated: prefer direct field assignment where possible: s.ID = pk.
func (s *Scheduler) SetPK(pk interface{}) {
	reform.SetPK(s, pk)
}

// check interfaces
var (
	_ reform.View   = SchedulerTable
	_ reform.Struct = (*Scheduler)(nil)
	_ reform.Table  = SchedulerTable
	_ reform.Record = (*Scheduler)(nil)
	_ fmt.Stringer  = (*Scheduler)(nil)
)

func init() {
	parse.AssertUpToDate(&SchedulerTable.s, new(Scheduler))
}
