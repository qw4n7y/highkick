{"version":3,"sources":["serviceWorker.ts","redux/actions/app.ts","redux/reducers/app.ts","models/job.ts","services/api.ts","lib/http.ts","services/tree.ts","services/jobs.ts","redux/actions/jobs.ts","redux/reducers/jobs.ts","models/job_meta.ts","services/job_metas.ts","redux/actions/job_metas.ts","redux/reducers/job_metas.ts","redux/reducers/index.ts","redux/middlewares/plain_object_middleware.ts","redux/store.ts","components/layout.tsx","components/misc/human_duration.tsx","components/jobs/status.tsx","models/job_log.ts","services/job_logs.ts","components/jobs/item.tsx","components/tree/leaf.tsx","components/tree/leaves.tsx","components/misc/paginator.tsx","components/jobs/filters.tsx","components/jobs/roots.tsx","pages/index.tsx","components/misc/json_editor.tsx","pages/new.tsx","models/scheduler.ts","services/schedulers.ts","redux/actions/schedulers.ts","components/schedulers/item.tsx","pages/schedulers_index.tsx","components/schedulers/form.tsx","pages/schedulers_new.tsx","pages/schedulers_edit.tsx","router.tsx","app.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","CHANGE_viewJSONlikeAPro","newValue","type","changeViewJSONlikeAPro","dispatch","getState","a","defaultState","viewJSONlikeAPro","reducer","state","action","Object","assign","Job","props","prop","id","path","sid","input","output","status","treeStatus","undefined","createdAt","cron","logsCount","StartedAt","FinishedAt","childs","this","isRoot","ids","split","map","i","parseInt","length","childsDigest","c","digest","join","Moment","diff","json","protocol","BASE","origin","API_BASE","URLS","ws","jobs","job","retry","retryFailedLeaves","subtree","run","destroy","jobRoots","index","jobLogs","jobId","jobMetas","schedulers","create","update","show","DEFAULT_HEADERS","makeRequest","method","url","data","headers","dataToSend","values","some","v","File","_data","FormData","keys","key","append","Axios","request","responseType","params","response","e","Error","__SERVER_SIDE_ERRORS__","errors","get","post","put","del","compose","rootId","items","root","find","composeSubTree","leaf","filter","l","parentID","filters","API","HTTP","rootJsons","roots","deserialize","jsons","updatedJob","Tree","SID","Input","loadRoots","loadSubtree","statuses","push","s","every","getInput","runJob","INDEX","Update","Index","Destroy","Jobs","Actions","newJob","existingJob","j","unshift","slice","indexOf","JobMeta","Title","InputJSONSchema","JobMetas","rootReducer","history","combineReducers","router","connectRouter","app","actionToPlainObjectMiddleware","store","next","val","composeEnhancers","Redux","__USE_MEMORY_HISTORY__","History","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","enhancers","routerMiddleware","ReduxThunk","preloadedState","createRootReducer","createStore","Layout","isWidget","widget","Navbar","bg","variant","className","Brand","href","src","height","width","to","Container","children","HumanDuration","seconds","hours","Math","floor","minutes","StatusComponent","JobLog","content","reverse","loadLogs","JobComponent","showLogs","showInputOutput","loadItem","bind","item","expanded","JSON","parse","jobMeta","candidate","style","display","gridTemplateAreas","gridTemplateColumns","gridGap","background","stringify","gridArea","cursor","renderStatus","Button","onClick","format","durationSeconds","zoom","collapsed","fontSize","displayDataTypes","jobLog","onExpand","JobLogs","setState","confirm","React","Component","ReactRedux","ownProps","TreeLeafComponent","builder","createElement","classnames","TreeLeaves","Paginator","onPageLinkClick","maxPage","Array","apply","renderPageLink","pageNumber","current","page","border","event","preventDefault","onPageChange","FiltersComponent","onChange","value","sort","b","name","Type","formData","currentTarget","RootsList","loading","onFiltersChange","loadItems","then","defaultChecked","checked","htmlFor","Item","newPage","max","AppActions","App","MyJSONEditor","elRef","createRef","jsonEditor","JSONEditor","theme","schema","jsonSchema","disable_array_reorder","array_controls_top","form_name_root","label","no_additional_properties","show_errors","object_layout","remove_empty_properties","setValue","defaultValue","on","ref","getValue","onJobSIDChange","onSubmit","sortedJobMetas","localeCompare","Form","Group","Label","Control","as","custom","renderInputEditor","jobSID","alert","reload","target","Scheduler","ID","JobType","JobInput","RunEverySeconds","Stopped","UpdatedAt","LastRunAt","LastError","scheduler","Schedulers","indexSchedulers","SchedulerActions","SchedulerForm","Check","model","clone","idStr","Router","exact","component","New","SchedulersIndex","SchedulersNew","SchedulersEdit","indexJobMetas","Row","Col","md","JobMetaActions","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.85ebfe1b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import ReduxState from '../state'\n\nexport const CHANGE_VIEWJSONLIKEAPRO = 'CHANGE_VIEWJSONLIKEAPRO'\n\nexport class CHANGE_viewJSONlikeAPro {\n  type = CHANGE_VIEWJSONLIKEAPRO\n  constructor(public newValue: boolean) { }\n}\n\nfunction changeViewJSONlikeAPro(newValue: boolean) {\n  return async (dispatch: any, getState: () => ReduxState) => {\n    dispatch(new CHANGE_viewJSONlikeAPro(newValue))\n  }\n}\n\nexport default { changeViewJSONlikeAPro }","import * as Actions from '../actions/app'\n\nexport type State = {\n  viewJSONlikeAPro: boolean\n}\n\nconst defaultState: State = {\n  viewJSONlikeAPro: true\n}\n\ntype Action = Actions.CHANGE_viewJSONlikeAPro\nexport default function reducer(state: State = defaultState, action: Action) {\n  switch (action.type) {\n    case Actions.CHANGE_VIEWJSONLIKEAPRO: {\n      const a = action as Actions.CHANGE_viewJSONlikeAPro\n      return Object.assign({}, state, {\n        viewJSONlikeAPro: a.newValue\n      } as Partial<State>)\n    }\n  }\n\n  return state\n}","import TreeLeaf from './tree_leaf'\nimport Moment from 'moment'\n\nexport type Status = 'scheduled' | 'initial' | 'processing' | 'failed' | 'completed'\n\ntype Props = {\n  id: number\n  type: string\n  path: string\n  sid: string\n  input: string\n  output: string\n  status: Status\n  treeStatus?: Status\n  createdAt: string\n  cron?: string\n  logsCount: number\n  StartedAt: string\n  FinishedAt: string\n\n  childs: Job[]\n}\n\nclass Job implements Props, TreeLeaf {\n  id: number = 0\n  type: string = ''\n  path: string = ''\n  sid: string = ''\n  input: string = ''\n  output: string = ''\n  status: Status = 'initial'\n  treeStatus?: Status = undefined\n  createdAt: string = ''\n  cron?: string = undefined\n  logsCount: number = 0\n  StartedAt: string = ''\n  FinishedAt: string = ''\n\n  childs: Job[] = []\n\n  constructor(props: Partial<Props>) {\n    // super()\n    for(const prop in props) {\n      (this as any)[prop] = (props as any)[prop]\n    }\n  }\n\n  isRoot() {\n    return this.path === ''\n  }\n\n  isPeriodical() {\n    return this.cron !== undefined\n  }\n\n  parentID() {\n    if (this.isRoot()) {\n      return null\n    }\n    const ids = this.path.split('/').map(i => parseInt(i))\n    return ids[ids.length - 1]\n  }\n\n  // TODO: use hash function\n  digest(): string {\n    const childsDigest = this.childs.map(c => c.digest()).join()\n    return `${this.id}${this.status}${this.treeStatus}${childsDigest}`\n  }\n\n  static deserialize(json: any): Job {\n    const job = new Job(json as Partial<Props>)\n    return job\n  }\n\n  durationSeconds() {\n    if (!this.StartedAt || !this.FinishedAt) { return 0 }\n    var durMilisecs = Moment(this.FinishedAt).diff(Moment(this.StartedAt))\n    return durMilisecs / 1000\n  }\n}\n\nexport default Job","const {protocol, hostname} = window.location\n\nconst env = process.env.NODE_ENV\n\nconst BASE = {\n  'development': `${protocol}//${hostname}:8000`,\n  'production': window.location.origin,\n  'test': window.location.origin\n}[env]\n\nconst API_BASE = `${BASE}/highkick`\n\nconst URLS = {\n  ws: `ws${window.location.protocol === 'https:' ? 's' : ''}://${API_BASE.split(\"//\")[1]}/ws`,\n  jobs: {\n    job: (id: number) => `${API_BASE}/jobs/show/${id}`,\n    retry: (id: number) => `${API_BASE}/jobs/retry/${id}`,\n    retryFailedLeaves: (id: number) => `${API_BASE}/jobs/retry_failed_leaves/${id}`,\n    subtree: (id: number) => `${API_BASE}/jobs/subtree/${id}`,\n    input: (id: number) => `${API_BASE}/jobs/input/${id}`,\n    run: `${API_BASE}/jobs/run`,\n    destroy: (id: number) => `${API_BASE}/jobs/delete/${id}`,\n  },\n  jobRoots: {\n    index: `${API_BASE}/job_roots/index`\n  },\n  jobLogs: {\n    index: (jobId: number) => `${API_BASE}/job_logs/index/${jobId}`,\n  },\n  jobMetas: {\n    index: `${API_BASE}/job_metas/index`,\n  },\n  schedulers: {\n    index: `${API_BASE}/schedulers/index`,\n    create: `${API_BASE}/schedulers/create`,\n    update: (id: number) => `${API_BASE}/schedulers/update/${id}`,\n    destroy: (id: number) => `${API_BASE}/schedulers/destroy/${id}`,\n    show: (id: number) => `${API_BASE}/schedulers/show/${id}`,\n  }\n}\n\nexport default { URLS }","import Axios from 'axios'\n\ntype HTTP_METHOD = 'get' | 'post' | 'put' | 'delete'\n\nconst DEFAULT_HEADERS = {\n  'Accept': 'application/json',\n  'Content-Type': 'application/json',\n}\n\nasync function makeRequest(method: HTTP_METHOD, url: string, data: any = null) {\n  const headers = Object.assign({}, DEFAULT_HEADERS)\n  let dataToSend = Object.assign({}, data)\n\n  // File uploading\n  //\n  const hasFiles = ((<any>Object).values(dataToSend).some((v: any) => v instanceof File))\n  if (hasFiles) {\n    headers['Content-Type'] = 'multipart/form-data'\n    const _data = new FormData()\n    for (const key of Object.keys(dataToSend)) {\n      _data.append(key, dataToSend[key])\n    }\n    dataToSend = _data\n  }\n\n  let response \n  try {\n    response = await Axios.request({\n      method, url, \n      data: dataToSend,\n      headers: headers,\n      // withCredentials: true,\n      responseType: 'json',\n      params: (method === 'get') ? dataToSend : undefined\n    })\n  } catch (error) {\n    if (!error.response) {\n      throw error\n    }\n    \n    if (error.response.status === 422) {\n      const e: any = new Error('422 response')\n       // NOTE: Client-server integration convention\n      e.__SERVER_SIDE_ERRORS__ = error.response.data.errors\n      throw e\n    }\n\n    throw error\n  }\n  \n  return response.data\n}\n\nasync function get(url: string, data: any = {}) {\n  return makeRequest('get', url, data)\n}\n\nasync function post(url: string, data: any = null) {\n  return makeRequest('post', url, data)\n}\n\nasync function put(url: string, data: any = null) {\n  return makeRequest('put', url, data)\n}\n\nasync function del(url: string, data: any = null) {\n  return makeRequest('delete', url, data)\n}\n\nexport default { get, post, put, del }\n","import TreeLeaf from '../models/tree_leaf'\n\nfunction compose<Item extends TreeLeaf>(params: {\n  rootId: number,\n  items: Item[]\n}) {\n  const { rootId, items } = params\n\n  const root = items.find(i => i.id === rootId)\n  if (!root) {\n    throw new Error('No root found')\n  }\n\n  const composeSubTree = (leaf: TreeLeaf) => {\n    leaf.childs = items.filter(l => l.parentID() === leaf.id)\n    for(const child of leaf.childs) {\n      composeSubTree(child)\n    }\n  }\n\n  composeSubTree(root)\n  return root\n}\n\nexport default { compose }","import Job, { Status } from '../models/job'\nimport Filters from '../models/filters'\n\nimport API from './api'\nimport HTTP from '../lib/http'\n\nimport Tree from './tree'\n\nasync function loadRoots(filters: Filters, params: { page: number }) {\n  const data = Object.assign({}, params, { filters })\n  const url = API.URLS.jobRoots.index\n  const rootJsons = await HTTP.get(url, data)\n  const roots = rootJsons.map(Job.deserialize)\n  return roots\n}\n\nasync function loadSubtree(job: Job) {\n  const jsons = await HTTP.get(API.URLS.jobs.subtree(job.id))\n  const jobs = jsons.map(Job.deserialize)\n  const updatedJob = Tree.compose<Job>({\n    items: jobs,\n    rootId: job.id\n  })\n  return updatedJob\n}\n\nasync function retry(job: Job) {\n  await HTTP.post(API.URLS.jobs.retry(job.id))\n}\n\nasync function retryFailedLeaves(job: Job) {\n  await HTTP.post(API.URLS.jobs.retryFailedLeaves(job.id))\n}\n\nasync function destroy(job: Job) {\n  const url = API.URLS.jobs.destroy(job.id)\n  await HTTP.del(url)\n}\n\nfunction treeStatus(job: Job): Status {\n  const statuses = job.childs.map(treeStatus)\n  statuses.push(job.status)\n  if (!!job.treeStatus) { statuses.push(job.treeStatus) }\n\n  if (statuses.some(s => s === 'processing')) {\n    return 'processing'\n  }\n\n  if (statuses.some(s => s === 'failed')) {\n    return 'failed'\n  }\n\n  if (statuses.every(s => s === 'completed')) {\n    return 'completed'\n  }\n\n  if (statuses.every(s => s === 'initial')) {\n    return 'initial'\n  }\n\n  return 'processing'\n}\n\nasync function getInput(job: Job) {\n  const url = API.URLS.jobs.input(job.id)\n  const data = await HTTP.get(url)\n  return data\n}\n\nasync function runJob(sid: string, input: any) {\n  const url = API.URLS.jobs.run\n  const response = await HTTP.post(url, {\n    SID: sid,\n    Input: input,\n  })\n  return response\n}\n\nexport default { \n  loadRoots, loadSubtree, retry, retryFailedLeaves,\n  destroy, treeStatus, getInput,\n  runJob,\n}\n","import ReduxState from '../state'\nimport Job from '../../models/job'\nimport Filters from '../../models/filters'\n\nimport Jobs from '../../services/jobs'\n\n// Types\n\nexport const INDEX = 'JOBS/INDEX'\nexport const UPDATE = 'JOBS/UPDATE'\nexport const DESTROY = 'JOBS/DESTROY'\n\n// Actions\n\nexport class Update {\n  type = UPDATE\n  constructor(public job: Job) { }\n}\n\nexport class Index {\n  type = INDEX\n  constructor(public jobs: Job[]) { }\n}\n\nexport class Destroy {\n  type = DESTROY\n  constructor(public job: Job) { }\n}\n\n// Action creators\n\nfunction index(filters: Filters, params: { page: number }) {\n  return async (dispatch: any, getState: () => ReduxState) => {\n    const jobs = await Jobs.loadRoots(filters, params)\n    dispatch(new Index(jobs))\n  }\n}\n\nfunction loadSubtree(job: Job) {\n  return async (dispatch: any, getState: () => ReduxState) => {\n    let updatedJob = await Jobs.loadSubtree(job)\n    dispatch(new Update(updatedJob))\n  }\n}\n\nfunction destroy(job: Job) {\n  return async (dispatch: any, getState: () => ReduxState) => {\n    await Jobs.destroy(job)\n    dispatch(new Destroy(job))\n  }\n}\n\nfunction getInput(job: Job) {\n  return async (dispatch: any, getState: () => ReduxState) => {\n    const input = await Jobs.getInput(job)\n    return input\n  }\n}\n\nfunction run(sid: string, input: any) {\n  return async (dispatch: any, getState: () => ReduxState) => {\n    const response = await Jobs.runJob(sid, input)\n    return response\n  }\n}\n\nexport default { index, loadSubtree, destroy, getInput, run }","import * as Actions from '../actions/jobs'\nimport Job from '../../models/job'\n\nexport type State = Job[]\n\nconst defaultState: State = []\n\ntype Action = Actions.Index | Actions.Update | Actions.Destroy\nexport default function reducer(state: State = defaultState, action: Action) {\n  switch (action.type) {\n    case Actions.INDEX: {\n      const a = action as Actions.Index\n      return a.jobs\n    }\n    case Actions.UPDATE: {\n      const a = action as Actions.Update\n      const newJob = a.job\n      \n      const existingJob = state.find((j: Job) => j.id === a.job.id)\n\n      // New root job\n      if (!existingJob && newJob.isRoot()) {\n        state.unshift(newJob)\n        return state.slice(0)\n      }\n\n      // In the list already\n      if (existingJob) {\n        const index = state.indexOf(existingJob)\n        state[index] = newJob\n        return state.slice(0)\n      }\n      \n      return state\n    }\n  }\n\n  return state\n}","type Props = {\n  SID: string\n  Title: string\n  InputJSONSchema?: string\n}\n\nclass JobMeta implements Props {\n  SID!: string\n  Title!: string\n  InputJSONSchema?: string\n\n  constructor(props: Partial<Props>) {\n    // super()\n    for(const prop in props) {\n      (this as any)[prop] = (props as any)[prop]\n    }\n  }\n\n  static deserialize(json: any): JobMeta {\n    const job = new JobMeta(json as Partial<Props>)\n    return job\n  }\n}\n\nexport default JobMeta","import JobMeta from '../models/job_meta'\n\nimport API from './api'\nimport HTTP from '../lib/http'\n\nasync function index() {\n  const url = API.URLS.jobMetas.index\n  const response = await HTTP.get(url, {})\n  const items = (response.items as any[]).map(JobMeta.deserialize)\n  return items\n}\n\nexport default { index }\n","import ReduxState from '../state'\nimport JobMeta from '../../models/job_meta'\nimport Filters from '../../models/filters'\n\nimport JobMetas from '../../services/job_metas'\n\n// Types\n\nexport const INDEX = 'JOB_METAS/INDEX'\n\n// Actions\n\nexport class Index {\n  type = INDEX\n  constructor(public items: JobMeta[]) { }\n}\n\n// Action creators\n\nfunction index() {\n  return async (dispatch: any, getState: () => ReduxState) => {\n    const items = await JobMetas.index()\n    dispatch(new Index(items))\n  }\n}\n\nexport default { index }","import * as Actions from '../actions/job_metas'\nimport JobMeta from '../../models/job_meta'\n\nexport type State = JobMeta[]\n\nconst defaultState: State = []\n\ntype Action = Actions.Index\nexport default function reducer(state: State = defaultState, action: Action) {\n  switch (action.type) {\n    case Actions.INDEX: {\n      const a = action as Actions.Index\n      return a.items\n    }\n  }\n  return state\n}","import { combineReducers } from 'redux'\nimport { connectRouter } from 'connected-react-router'\n\nimport app from './app'\nimport jobs from './jobs'\nimport jobMetas from './job_metas'\n\nconst rootReducer = (history: any) => combineReducers({\n  router: connectRouter(history),\n  app,\n  jobs,\n  jobMetas,\n})\n\nexport default rootReducer","import * as Redux from 'redux'\n\n// Middleware for allowing actions to be class instances\nconst actionToPlainObjectMiddleware: Redux.Middleware<any, any> = store => next => action => {\n  function isObjectLike(val: any): val is {} {\n    return val !== undefined && val !== null && typeof val === 'object'\n   }\n  if (isObjectLike(action)) {\n    return next({ ...action } as any)\n  }\n  return next(action)\n}\n\nexport default actionToPlainObjectMiddleware","import * as Redux from 'redux'\nimport ReduxThunk from 'redux-thunk'\n\nimport * as History from 'history'\nimport { routerMiddleware } from 'connected-react-router'\n\nimport createRootReducer from './reducers'\n\nimport actionToPlainObjectMiddleware from './middlewares/plain_object_middleware'\n\ndeclare var window: {\n  __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: any,\n  __USE_MEMORY_HISTORY__?: boolean\n}\n\nlet composeEnhancers = Redux.compose\n\n// Create an enhanced history that syncs navigation events with the store\nconst history: History.History = !!window.__USE_MEMORY_HISTORY__ ?\n  History.createMemoryHistory() : History.createHashHistory()\n\n// FIXME: https://github.com/zalmoxisus/redux-devtools-extension/issues/588\nif (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) {\n  composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n}\n\n// Build the middleware for intercepting and dispatching navigation actions\nconst middlewares = Redux.applyMiddleware(\n  routerMiddleware(history),\n  ReduxThunk,\n  actionToPlainObjectMiddleware\n)\nconst enhancers = composeEnhancers(middlewares)\n\nfunction createStore(preloadedState: any = {}) {\n  const rootReducer = createRootReducer(history)\n  const store = Redux.createStore(rootReducer, preloadedState, enhancers)\n  return store\n}\n\nconst store = createStore()\nexport { history, store, createStore }","import React from 'react';\nimport { Link } from 'react-router-dom'\n\nimport { Container, Navbar } from 'react-bootstrap'\n\ntype Props = React.PropsWithChildren<{\n  widget?: boolean\n}>\n\nconst Layout: React.FC<Props> = (props: Props) => {\n  const isWidget = props.widget || false\n\n  return (\n    <>\n      <Navbar bg=\"light\" variant=\"light\" className=\"border-dark border-bottom d-flex align-items-center\">\n        <Navbar.Brand href=\"\" className=\"p-0 flex-fill\">\n          <img src=\"favicon.ico\" height=\"32\" width=\"32\"/>\n          &nbsp;\n          <a href=\"/\" className=\"text-dark\">Highkick</a>\n        </Navbar.Brand>\n\n          <Link to=\"/index\" className=\"pr-2\">Jobs</Link>\n          <Link to=\"/schedulers/index\">Schedulers</Link>\n      </Navbar>\n      <Container className={isWidget ? \"m-0 p-0\" : undefined}>\n        { props.children }\n      </Container>\n    </>);\n}\n\nexport default Layout;\n","import React from 'react'\n\nfunction HumanDuration(props: {seconds: number}) {\n    const hour = 3600;\n    const minute = 60;\n\n    let { seconds } = props\n\n    const hours = Math.floor(seconds / hour);\n    seconds = seconds - hours * hour;\n\n    const minutes = Math.floor(seconds / minute);\n    seconds = seconds - minutes * minute;\n\n    return (\n        <span>\n            { hours > 0 && <>{hours}h</> }\n            { minutes > 0 && <>{minutes}m</> }\n            { seconds > 0 && <>{seconds}s</> }\n        </span>\n    )\n}\n\nexport default HumanDuration","import React from 'react'\nimport { XCircle, Play, Check2, Hexagon, HourglassSplit } from 'react-bootstrap-icons'\n\nimport { Status } from '../../models/job'\n\ntype Props = {\n  title?: string\n  status: Status\n}\n\nconst StatusComponent: React.FC<Props> = (props: Props) => {\n  const { status } = props\n\n  switch(status) {\n    case 'scheduled':\n      return <HourglassSplit/>\n    case 'initial':\n      return <Hexagon/>\n    case 'processing':\n      return <Play/>\n    case 'failed':\n      return <XCircle/>\n    case 'completed':\n      return <Check2/>\n  }\n\n  return null\n}\n\nexport default StatusComponent","type Props = {\n  id: number\n  content: string\n  createdAt: string\n}\n\nclass JobLog implements Props {\n  id: number = 0\n  content: string = ''\n  createdAt: string = ''\n\n  constructor(props: Partial<Props>) {\n    if(props.id) { this.id = props.id }\n    if(props.content) { this.content = props.content }\n    if(props.createdAt) { this.createdAt = props.createdAt }\n  }\n\n  static deserialize(json: any): JobLog {\n    const model = new JobLog(json as Partial<Props>)\n    return model\n  }\n}\n\nexport default JobLog","import Job from '../models/job'\nimport JobLog from '../models/job_log'\n\nimport API from './api'\nimport HTTP from '../lib/http'\n\nasync function loadLogs(job: Job) {\n  const data = await HTTP.get(API.URLS.jobLogs.index(job.id))\n  const roots = data.map(JobLog.deserialize).reverse()\n  return roots\n}\n\nexport default { loadLogs }\n","import React from 'react'\nimport * as ReactRedux from 'react-redux'\nimport Moment from 'moment'\n\nimport ReduxState from './../../redux/state'\nimport Actions from '../../redux/actions/jobs'\n\nimport ReactJsonView from 'react-json-view'\nimport { Button } from 'react-bootstrap'\nimport { \n  ArrowRight, ArrowDown, ArrowClockwise, Trash,\n  ReceiptCutoff, BoxArrowInRight, BoxArrowRight,\n  ArrowLeftRight, Clock,\n} from 'react-bootstrap-icons'\nimport HumanDuration from '../misc/human_duration'\n\nimport StatusComponent from './status'\n\nimport Job from '../../models/job'\nimport JobMeta from '../../models/job_meta'\nimport JobLog from '../../models/job_log'\nimport Jobs from '../../services/jobs'\nimport JobLogs from '../../services/job_logs'\n\ntype Props = {\n  item: Job\n  onExpand: (expanded: boolean) => any\n  expanded: boolean\n\n  viewJSONlikeAPro?: boolean\n  jobMetas?: JobMeta[]\n  loadSubtree?: (job: Job) => Promise<any>\n  destroy?: () => any\n  getInput?: () => Promise<any>\n}\n\ntype State = {\n  showLogs: boolean\n  jobLogs: JobLog[]\n  input: any\n  showInputOutput: boolean\n}\n\nclass JobComponent extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n\n    this.state = {\n      showLogs: false,\n      jobLogs: [],\n      input: null,\n      showInputOutput: false,\n    }\n\n    this.loadItem = this.loadItem.bind(this)\n    this.showLogs = this.showLogs.bind(this)\n    this.retry = this.retry.bind(this)\n    this.retryFailedLeaves = this.retryFailedLeaves.bind(this)\n    this.destroy = this.destroy.bind(this)\n    this.showInputOutput = this.showInputOutput.bind(this)\n  }\n\n  render() {\n    const { item, expanded, jobMetas } = this.props\n    const { input, jobLogs } = this.state\n    const output = item.output !== \"\" ? JSON.parse(item.output) : {}\n    const jobMeta = (jobMetas || []).find(candidate => candidate.SID === item.type)\n\n    const treeStatus = Jobs.treeStatus(item)\n\n    return (\n      <div \n        className=\"p-0 m-0\"\n        style={{\n          display: \"grid\",\n          gridTemplateAreas: \"'header actions' 'details details'\",\n          gridTemplateColumns: \"1fr 170px\",\n          gridGap: \"2px\",\n          background: treeStatus === \"failed\" ? \"#fcede8\" : treeStatus === \"processing\" ? \"#e8f4fc\" : \"#f8f9fa\",\n        }}\n        key={JSON.stringify(jobMeta)}\n      >\n        <div \n          style={{\n            gridArea: \"header\",\n            cursor: 'pointer'\n          }}\n          className=\"d-flex align-items-center\"\n        >\n          {this.renderStatus()}\n          <span className=\"ml-1 mr-1\">\n            {jobMeta?.Title || item.sid}\n          </span>\n          <small className=\"text-muted ml-2 mr-2\">\n            {item.id}\n          </small>\n          <Button variant=\"light\"\n            className={this.state.showInputOutput ? undefined : \"text-muted\"}\n            onClick={() => this.showInputOutput(!this.state.showInputOutput)}\n          ><ArrowLeftRight/></Button>\n          { (item.logsCount > 0) && (\n              <Button variant=\"light\"\n                      className={this.state.showLogs ? undefined : \"text-muted\"}\n                      onClick={() => this.showLogs(!this.state.showLogs)}\n              ><ReceiptCutoff/></Button>) }\n          <span className=\"flex-fill\" onClick={this.loadItem} style={{cursor: 'pointer'}}>\n            { expanded ? <ArrowDown/> : <ArrowRight/> }\n          </span>\n          <small className=\"text-muted\">\n            {Moment(item.createdAt).format(\"MM-DD HH:mm\")}\n            { item.durationSeconds() > 0 && <>\n              <Clock/>\n              <HumanDuration seconds={item.durationSeconds()}/>\n            </> }\n          </small>\n        </div>\n\n        <div style={{ gridArea: \"actions\" }}\n          className=\"btn-group btn-group-sm\"\n        >\n          <Button variant=\"light\"\n            onClick={this.retry}\n          ><ArrowClockwise/></Button>\n          <Button variant=\"light\" onClick={this.destroy}\n          ><Trash/></Button>\n        </div>\n\n        <div\n          style={{ \n            gridArea: \"details\",\n          }}\n          className=\"d-flex flex-column\"\n        >\n          <div\n            style={{\n              display: this.state.showInputOutput ? 'flex' : 'none'\n            }}\n          >\n            <div className=\"d-flex align-items-center\">\n              <BoxArrowInRight className=\"m-2\" style={{zoom: 1.5}}/>\n              { this.props.viewJSONlikeAPro && (<>\n                { !!input && <ReactJsonView src={input} collapsed={true} style={{fontSize: 10}} displayDataTypes={false}/> }\n                { !input && <>&mdash;</> }\n              </>) }\n              { !this.props.viewJSONlikeAPro && (\n                <code style={{fontSize: 10}}>{JSON.stringify(input, null, 2)}</code>\n              ) }\n            </div>\n            <div className=\"d-flex align-items-center\">\n              <BoxArrowRight className=\"m-2\" style={{zoom: 1.5}}/>\n              { this.props.viewJSONlikeAPro && (<>\n                { !!output && <ReactJsonView src={output} collapsed={true} style={{fontSize: 10}} displayDataTypes={false}/> }\n                { !output && <>&mdash;</> }\n              </>) }\n              { !this.props.viewJSONlikeAPro && (\n                <code style={{fontSize: 10}}>{JSON.stringify(output, null, 2)}</code>\n              ) }\n            </div>\n          </div>\n          \n          <div\n            style={{\n              display: this.state.showLogs ? 'block' : 'none'\n            }}\n          >\n            { jobLogs.map(jobLog => {\n              return (\n                <div className=\"alert alert-primary p-0 d-flex\" key={jobLog.id}>\n                  <small className=\"text-muted mr-2\">{jobLog.createdAt}</small>\n                  <code className=\"flex-fill\">{jobLog.content}</code>\n                </div>)\n            }) }\n          </div>\n        </div>\n      </div>)\n  }\n\n  private renderStatus() {\n    const { item } = this.props\n    const treeStatus = Jobs.treeStatus(item)\n\n    if (item.status === treeStatus) {\n      return <StatusComponent status={item.status}/>\n    }\n\n    return [\n      <StatusComponent status={treeStatus}/>,\n      <StatusComponent status={item.status}/>\n    ]\n  }\n\n  private async loadItem() {\n    const { item, expanded } = this.props\n    if (!expanded) {\n      await this.props.loadSubtree!(item)\n      this.props.onExpand(true)\n    } else {\n      this.props.onExpand(false)\n    }\n  }\n\n  private async showLogs(showLogs: boolean) {\n    const { item } = this.props\n    if (showLogs) {\n      let jobLogs = await JobLogs.loadLogs(item)\n      this.setState({ showLogs, jobLogs })\n    } else {\n      this.setState({ showLogs })\n    }\n  }\n\n  private retry() {\n    const { item } = this.props;\n    if (window.confirm('Do you wanna to retry this job?') === false) {\n      return\n    }\n\n    (async () => {\n      await Jobs.retry(item)\n    })()\n  }\n\n  private retryFailedLeaves() {\n    const { item } = this.props;\n    if (window.confirm('Do you wanna to retry failed children of this job?') === false) {\n      return\n    }\n\n    (async () => {\n      await Jobs.retryFailedLeaves(item)\n    })()\n  }\n\n  private destroy() {\n    if (window.confirm('Do you wanna to destroy this job?') === false) {\n      return\n    }\n    this.props.destroy!()\n  }\n\n  private async showInputOutput(showInputOutput: boolean) {\n    if (showInputOutput === true) {\n      const input = await this.props.getInput!()\n      this.setState({ input })\n    }\n    this.setState({ showInputOutput })\n  }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: Props) => ({\n  jobMetas: state.jobMetas,\n  viewJSONlikeAPro: state.app.viewJSONlikeAPro,\n})\nconst mapDispatchToProps = (dispatch: any, ownProps: Props) => {\n  const { item } = ownProps\n  return {\n    loadSubtree: (job: Job) => dispatch(Actions.loadSubtree(job)),\n    destroy: () => dispatch(Actions.destroy(item)),\n    getInput: () => dispatch(Actions.getInput(item)),\n  }\n}\n\nexport default ReactRedux.connect(mapStateToProps, mapDispatchToProps)(JobComponent)","import React from 'react'\nimport classnames from 'classnames'\n\nimport TreeLeaf from '../../models/tree_leaf'\nimport Builder from './builder'\nimport Leaves from './leaves'\n\ntype Props<Item> = {\n  item: Item\n  builder: Builder<Item>\n}\n\ntype State = {\n  expanded: boolean\n}\n\nclass TreeLeafComponent<Item extends TreeLeaf> extends React.Component<Props<Item>, State> {\n  constructor(props: Props<Item>) {\n    super(props)\n\n    this.state = {\n      expanded: false\n    }\n\n    this.onExpand = this.onExpand.bind(this)\n  }\n\n  render() {\n    const { item, builder } = this.props\n    const { expanded } = this.state\n\n    return (\n      <li className=\"list-group-item p-0 border-0 m-0 mb-1\" key={item.digest()}>\n        {React.createElement(builder, {\n          item,\n          onExpand: this.onExpand,\n          expanded\n        })}\n        <div className={classnames({'d-none': !expanded, 'mt-1 ml-4': true})}>\n          <Leaves\n            items={item.childs as Item[]}\n            builder={builder}\n          />\n        </div>\n      </li>)\n  }\n\n  private onExpand(expanded: boolean) {\n    this.setState({ expanded })\n  }\n}\n\nexport default TreeLeafComponent","import React from 'react'\nimport classnames from 'classnames'\n\nimport TreeLeafInterface from '../../models/tree_leaf'\nimport Builder from './builder'\nimport Leaf from './leaf'\n\ntype Props<Item> = {\n  items: Item[]\n  builder: Builder<Item>\n}\n\nclass TreeLeaves<Item extends TreeLeafInterface> extends React.Component<Props<Item>> {\n  render() {\n    const { items, builder } = this.props\n\n    return (\n      <ul className={classnames('list-group', 'list-group-flush', 'p-0')}>\n        { items.map(item => {\n          return (\n            <Leaf\n              key={item.id}\n              item={item}\n              builder={builder}\n            />)\n        }) }\n      </ul>)\n  }\n}\n\nexport default TreeLeaves","import React from 'react'\n\ntype Props = {\n  page: number\n  maxPage: number\n  onPageChange: (page: number) => any\n}\n\nclass Paginator extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props)\n    this.onPageLinkClick = this.onPageLinkClick.bind(this)\n  }\n\n  render() {\n    const { maxPage } = this.props\n\n    return (\n      <nav>\n        <ul className=\"pagination pagination-sm justify-content-center m-1\">\n          { Array.apply(null, Array(maxPage)).map((v, i) => {\n            return this.renderPageLink(i + 1)\n          }) }\n        </ul>\n      </nav>)\n  }\n\n  private renderPageLink(pageNumber: number) {\n    const { page } = this.props\n    const current = page === pageNumber\n\n    return (\n      <li \n        className=\"page-item\" key={pageNumber}\n        style={{cursor: 'pointer'}}\n      >\n        { current && (\n            <span \n              className=\"page-link text-muted\"\n              style={{border: 'none'}}\n            >{pageNumber}</span>) }\n      \n        { !current && (\n            <a \n              className=\"page-link\"\n              style={{border: 'none'}}\n              href=\"#\"\n              onClick={(event) => this.onPageLinkClick(event, pageNumber)}\n            >{pageNumber}</a>) }\n      </li>)\n  }\n\n  private onPageLinkClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>, page: number) {\n    event.preventDefault()\n    this.props.onPageChange(page)\n  }\n}\n\nexport default Paginator","import React from 'react'\nimport * as ReactRedux from 'react-redux'\nimport ReduxState from './../../redux/state'\n\nimport Filters from '../../models/filters'\nimport { Funnel } from 'react-bootstrap-icons'\nimport JobMeta from '../../models/job_meta'\n\ntype Props = {\n  jobMetas?: JobMeta[]\n  value: Filters\n  onChange: (value: Filters) => any\n}\n\nclass FiltersComponent extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props)\n    this.onChange = this.onChange.bind(this)\n  }\n\n  render() {\n    const { value } = this.props\n    const jobMetas = (this.props.jobMetas || []).sort((a, b) => {\n      return a.SID > b.SID ? 1 : -1\n    })\n\n    return (\n      <form onChange={this.onChange}>\n        <div className=\"d-flex align-items-center\">\n          <Funnel/>\n          <select \n            className=\"form-control form-control-sm\"\n            name=\"Type\"\n            value={value.Type}\n          >\n            <option></option>\n            { (jobMetas || []).map(jobMeta => (\n              <option value={jobMeta.SID}>{jobMeta.SID}</option>\n            ))}\n          </select>\n        </div>\n      </form>\n    )\n  }\n\n  private onChange(event: React.FormEvent<HTMLFormElement>) {\n    const formData = new FormData(event.currentTarget)\n    const value: Filters = {}\n    if (formData.get(\"Type\") !== \"\") { value.Type = formData.get(\"Type\") as string }\n    this.props.onChange(value)\n  }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: Props) => ({\n  jobMetas: state.jobMetas,\n})\nconst mapDispatchToProps = (dispatch: any, ownProps: Props) => ({})\nexport default ReactRedux.connect(mapStateToProps, mapDispatchToProps)(FiltersComponent)","import React from 'react'\nimport * as ReactRedux from 'react-redux'\nimport ReduxState from './../../redux/state'\nimport Actions from '../../redux/actions/jobs'\nimport AppActions from '../../redux/actions/app'\nimport { Link as RouterLink } from 'react-router-dom'\nimport { PlusCircle } from 'react-bootstrap-icons'\n\nimport Job from '../../models/job'\nimport JobMeta from '../../models/job_meta'\nimport Filters from '../../models/filters'\nimport Item from './item'\nimport TreeLeaves from '../tree/leaves'\nimport Paginator from '../misc/paginator'\nimport FiltersComponent from './filters'\n\ntype Props = {\n  viewJSONlikeAPro?: boolean\n  jobMetas?: JobMeta[]\n  roots?: Job[]\n  index?: (filters: Filters, params: { page: number }) => any\n  changeViewJSONlikeAPro?: (newValue: boolean) => any\n}\ntype State = {\n  filters: Filters\n  loading: boolean\n  page: number\n  maxPage: number\n}\n\nclass RootsList extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n\n    this.state = {\n      loading: true,\n      page: 1,\n      maxPage: 1,\n      filters: {}\n    }\n    \n    this.onPageChange = this.onPageChange.bind(this)\n    this.onFiltersChange = this.onFiltersChange.bind(this)\n  }\n\n  componentDidMount() {\n    this.loadItems(1).then(() => {})\n  }\n\n  render() {\n    const { roots } = this.props\n    const { loading, page, maxPage } = this.state\n\n    if (loading) {\n      return (\n        <div className=\"d-flex w-100 h-100\">\n          <div className=\"m-auto\">Loading</div>\n        </div>\n      )\n    }\n\n    return (\n      <>\n        <div  className=\"jumbotron p-2 m-1 d-flex align-items-center\">\n          <div className=\"form-check form-check-inline flex-fill\">\n            <input \n              className=\"form-check-input\"\n              type=\"checkbox\"\n              defaultChecked={this.props.viewJSONlikeAPro}\n              id=\"viewJSONlikeAPro\"\n              onChange={event => {\n                this.props.changeViewJSONlikeAPro!(event.currentTarget.checked)\n              }}\n            />\n            <label className=\"form-check-label\" htmlFor=\"viewJSONlikeAPro\">\n              View JSON like a pro\n            </label>\n          </div>\n          <FiltersComponent\n            value={this.state.filters}\n            onChange={this.onFiltersChange}\n          /> \n          <RouterLink to={\"/new\"} className=\"btn btn-light\">\n            <PlusCircle/>\n          </RouterLink>\n        </div>\n        \n        <TreeLeaves\n          items={roots! || []}\n          builder={Item}\n        />\n        <Paginator page={page} maxPage={maxPage} onPageChange={this.onPageChange}/>\n      </>)\n  }\n\n  private onPageChange(newPage: number) {\n    this.loadItems(newPage).then(() => {})\n  }\n\n  private async loadItems(page: number) {\n    const { filters, maxPage } = this.state\n    await this.props.index!(filters, { page })\n    this.setState({\n      loading: false,\n      page,\n      maxPage: Math.max(maxPage, page + 1),\n    })\n  }\n\n  private onFiltersChange(filters: Filters) {\n    this.setState({\n      filters\n    }, () => {\n      this.loadItems(1).then(() => {})\n    })\n  }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: Props) => ({\n  roots: state.jobs,\n  jobMetas: state.jobMetas,\n  viewJSONlikeAPro: state.app.viewJSONlikeAPro,\n})\nconst mapDispatchToProps = (dispatch: any, ownProps: Props) => ({\n  index: (filters: Filters, params: { page: number }) => dispatch(Actions.index(filters, params)),\n  changeViewJSONlikeAPro: (newValue: boolean) => dispatch(AppActions.changeViewJSONlikeAPro(newValue))\n})\n\nexport default ReactRedux.connect(mapStateToProps, mapDispatchToProps)(RootsList)","import React from 'react'\nimport * as ReactRedux from 'react-redux'\nimport ReduxState from './../redux/state'\n\nimport JobRootsList from './../components/jobs/roots'\n\ntype Props = {\n}\nclass App extends React.Component<Props> {\n\n  render() {\n    return (\n      <JobRootsList/>\n    );\n  }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: Props) => ({})\nconst mapDispatchToProps = (dispatch: any, ownProps: Props) => ({})\n\nexport default ReactRedux.connect(mapStateToProps, mapDispatchToProps)(App)\n","import React from 'react'\n\ntype Props<T> = {\n  label: string\n  defaultValue: T\n  onChange: (newValue: T) => any\n  jsonSchema: any\n}\n\n// No typings\n// Lib loaded in old-school way globaly and binded to `window`\n\nclass MyJSONEditor<T> extends React.Component<Props<T>> {\n  private elRef = React.createRef<HTMLDivElement>()\n  private jsonEditor: any\n\n  constructor(props: Props<T>) {\n    super(props)\n    this.onChange = this.onChange.bind(this)\n  }\n\n  componentDidMount() {\n    this.jsonEditor = new (window as any).JSONEditor(this.elRef.current, {\n      theme: 'bootstrap4',\n      schema: this.props.jsonSchema,\n      disable_array_reorder: true,\n      // disable_edit_json: true,\n      array_controls_top: true,\n      form_name_root: this.props.label,\n      no_additional_properties: true,\n      show_errors: 'always',\n      object_layout: 'table',\n      remove_empty_properties: false,\n    });\n\n    this.jsonEditor.setValue(this.props.defaultValue)\n    this.jsonEditor.on('change', this.onChange);\n  }\n\n  render() {\n    return (\n      <div ref={this.elRef}/>)\n  }\n\n  onChange() {\n    const value = this.jsonEditor.getValue()\n    this.props.onChange(value)\n  }\n}\n\nexport default MyJSONEditor","import React from 'react'\nimport * as ReactRedux from 'react-redux'\nimport ReduxState from './../redux/state'\n\nimport JobMeta from '../models/job_meta'\nimport { Form, Button } from 'react-bootstrap'\nimport JsonEditor from './../components/misc/json_editor'\n\nimport Actions from '../redux/actions/jobs'\n\ntype Props = {\n  jobMetas?: JobMeta[]\n  runJob?: (sid: string, input: any) => Promise<any>\n}\n\ntype State = {\n  jobSID?: string\n  input?: any\n}\n\nclass App extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    this.state = {}\n    this.onJobSIDChange = this.onJobSIDChange.bind(this)\n    this.onSubmit = this.onSubmit.bind(this)\n  }\n\n  render() {\n    const sortedJobMetas = (this.props.jobMetas || []).sort(function (a, b) {\n      return a.Title.localeCompare(b.Title);\n    })\n\n    return (\n      <>\n        <h3>Run new job</h3>\n        <Form onSubmit={this.onSubmit}>\n          <Form.Group>\n            <Form.Label>SID</Form.Label>\n            <Form.Control as=\"select\" custom\n              onChange={this.onJobSIDChange}\n            >\n              <option className=\"text-muted\" value=\"\">Choose job to create</option>\n              {sortedJobMetas.map(jobMeta => {\n                return (<option value={jobMeta.SID}>{jobMeta.Title}</option>)\n              })}\n            </Form.Control>\n          </Form.Group>\n          <Form.Group>\n            {this.renderInputEditor()}\n\n            <blockquote className=\"blockquote\">\n              <p className=\"mb-0\">{JSON.stringify(this.state.input)}</p>\n              <footer className=\"blockquote-footer\">would be sent as job input</footer>\n            </blockquote>\n            \n          </Form.Group>\n          <Button variant=\"light\" type=\"submit\" className=\"w-100\">\n            Submit\n          </Button>\n        </Form>\n      </>\n    );\n  }\n\n  renderInputEditor() {\n    const { jobSID } = this.state\n    const jobMeta = (this.props.jobMetas || []).find(c => c.SID === jobSID)\n    if (!jobMeta) { return }\n\n    if (!jobMeta.InputJSONSchema) {\n      return (\n        <div className=\"alert alert-primary\">\n          No input JSON schema defined for this Job\n        </div>\n      )\n    }\n\n    const jsonSchema = JSON.parse(jobMeta.InputJSONSchema!)\n    return (\n      <JsonEditor\n        label=\"Input\"\n        jsonSchema={jsonSchema}\n        defaultValue={this.state.input}\n        onChange={newValue => {\n          this.setState({\n            input: newValue\n          })\n        }}\n      />\n    )\n  }\n\n  private async onSubmit(event: React.SyntheticEvent<HTMLFormElement>) {\n    event.preventDefault()\n\n    const response = await this.props.runJob!(this.state.jobSID!, this.state.input)\n    alert(`Job has started`)\n    window.location.reload()\n    \n    return false\n  }\n\n  private onJobSIDChange(event: React.ChangeEvent<HTMLSelectElement>) {\n    const jobSID = event.target.value\n    if (jobSID === \"\") {\n      this.setState({ jobSID: undefined })\n    } else {\n      this.setState({ jobSID })\n    }\n  }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: Props) => ({\n  jobMetas: state.jobMetas,\n})\nconst mapDispatchToProps = (dispatch: any, ownProps: Props) => ({\n  runJob: (sid: string, input: any) => dispatch(Actions.run(sid, input)),\n})\n\nexport default ReactRedux.connect(mapStateToProps, mapDispatchToProps)(App)\n","class Scheduler {\n    ID!: number\n    JobType!: string\n    JobInput!: string\n    RunEverySeconds!: number\n    Stopped!: boolean\n    UpdatedAt!: string\n    LastRunAt!: string\n    LastError!: string\n\n    constructor(props: any) {\n        for(const prop in props) {\n            (this as any)[prop] = (props as any)[prop]\n        }\n    }\n}\n\nexport default Scheduler","import API from './api'\nimport HTTP from '../lib/http'\n\nimport Scheduler from '../models/scheduler'\n\nasync function index() {\n    const data = Object.assign({}, {})\n    const url = API.URLS.schedulers.index\n    const response = await HTTP.get(url, data)\n    const items = (response as any[]).map(props => new Scheduler(props))\n    return items\n}\n\nasync function create(scheduler: Scheduler) {\n    const data = Object.assign({}, scheduler)\n    const url = API.URLS.schedulers.create\n    await HTTP.post(url, data)\n}\n\nasync function update(scheduler: Scheduler) {\n    const data = Object.assign({}, scheduler)\n    const url = API.URLS.schedulers.update(scheduler.ID)\n    await HTTP.post(url, data)\n}\n\nasync function show(id: number) {\n    const data = Object.assign({}, {})\n    const url = API.URLS.schedulers.show(id)\n    const response = await HTTP.get(url, data)\n    return new Scheduler(response)\n}\n\nasync function destroy(scheduler: Scheduler) {\n    const url = API.URLS.schedulers.destroy(scheduler.ID)\n    await HTTP.del(url)\n}\n\nexport default { index, create, destroy, update, show }","import ReduxState from '../state'\n\nimport Schedulers from '../../services/schedulers'\nimport Scheduler from \"../../models/scheduler\";\n\n// Action creators\n\nfunction index() {\n\treturn async (dispatch: any, getState: () => ReduxState) => {\n\t\tconst schedulers = await Schedulers.index()\n\t\treturn schedulers\n\t}\n}\n\nfunction create(scheduler: Scheduler) {\n\treturn async (dispatch: any, getState: () => ReduxState) => {\n\t\tawait Schedulers.create(scheduler)\n\t}\n}\n\nfunction update(scheduler: Scheduler) {\n\treturn async (dispatch: any, getState: () => ReduxState) => {\n\t\tawait Schedulers.update(scheduler)\n\t}\n}\n\nfunction show(id: number) {\n\treturn async (dispatch: any, getState: () => ReduxState) => {\n\t\tconst scheduler = await Schedulers.show(id)\n\t\treturn scheduler\n\t}\n}\n\nfunction destroy(scheduler: Scheduler) {\n\treturn async (dispatch: any, getState: () => ReduxState) => {\n\t\tawait Schedulers.destroy(scheduler)\n\t}\n}\n\nexport default { index, create, destroy, update, show }","import React from 'react'\nimport * as ReactRedux from 'react-redux'\nimport { Link } from 'react-router-dom'\n\nimport ReduxState from './../../redux/state'\nimport Actions from '../../redux/actions/schedulers'\n\nimport ReactJsonView from 'react-json-view'\nimport { Button } from 'react-bootstrap'\nimport { Trash, PauseCircle, PencilSquare } from 'react-bootstrap-icons'\nimport HumanDuration from '../../components/misc/human_duration'\n\nimport Scheduler from '../../models/scheduler'\n\ntype Props = {\n    item: Scheduler\n    destroy?: (item: Scheduler) => any\n}\n\ntype State = {}\n\nclass JobComponent extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n\n        this.state = {}\n\n        this.destroy = this.destroy.bind(this)\n    }\n\n    render() {\n        const { item } = this.props\n        const input = JSON.parse(item.JobInput)\n\n        return (\n            <div className=\"card w-100\">\n                <div className=\"card-body d-flex align-items-center\">\n                    <span>{item.JobType} every <HumanDuration seconds={item.RunEverySeconds}/></span>\n                    <div className=\"flex-fill\">\n                        <ReactJsonView src={input} collapsed={true} style={{fontSize: 10}} displayDataTypes={false}/>\n                    </div>\n                    { !!item.Stopped && <PauseCircle/> }\n                    <span>{item.LastRunAt}</span>\n                    { !!item.LastError && <div className=\"alert alert-danger\">{item.LastError}</div> }\n\n                    <Link to={`/schedulers/edit/${item.ID}`}><PencilSquare/></Link>\n\n                    <Button variant=\"light\" onClick={this.destroy}\n                    ><Trash/></Button>\n                </div>\n            </div>)\n    }\n\n    private destroy() {\n        if (window.confirm('Do you wanna to destroy?') === false) {\n            return\n        }\n        this.props.destroy!(this.props.item)\n    }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: Props) => ({})\nconst mapDispatchToProps = (dispatch: any, ownProps: Props) => ({\n    destroy: (item: Scheduler) => dispatch(Actions.destroy(item))\n})\n\nexport default ReactRedux.connect(mapStateToProps, mapDispatchToProps)(JobComponent)","import React from 'react'\nimport * as ReactRedux from 'react-redux'\nimport ReduxState from './../redux/state'\n\nimport {Link as RouterLink, Link} from 'react-router-dom'\nimport { PlusCircle } from 'react-bootstrap-icons'\n\nimport SchedulerActions from '../redux/actions/schedulers'\nimport Scheduler from \"../models/scheduler\"\n\nimport ItemComponent from '../components/schedulers/item'\n\ntype Props = {\n    indexSchedulers?: () => Promise<Scheduler[]>\n}\ntype State = {\n    schedulers: Scheduler[]\n}\n\nclass App extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            schedulers: []\n        }\n    }\n\n    async componentDidMount() {\n        const schedulers = await this.props.indexSchedulers!()\n        this.setState({ schedulers })\n    }\n\n    render() {\n        const { schedulers } = this.state\n\n\n        return (\n            <>\n                <div className=\"jumbotron p-2 m-1 d-flex align-items-center\">\n                    <span className=\"flex-fill\">Schedulers</span>\n                    <RouterLink to={\"/schedulers/new\"} className=\"btn btn-light\">\n                        <PlusCircle/>\n                    </RouterLink>\n                </div>\n                { schedulers.map(scheduler => (\n                    <ItemComponent item={scheduler}/>\n                )) }\n            </>\n        );\n    }\n};\n\nconst mapStateToProps = (state: ReduxState, ownProps: Props) => ({})\nconst mapDispatchToProps = (dispatch: any, ownProps: Props) => ({\n    indexSchedulers: () => dispatch(SchedulerActions.index())\n})\n\nexport default ReactRedux.connect(mapStateToProps, mapDispatchToProps)(App)\n","import React from 'react'\nimport * as ReactRedux from 'react-redux'\nimport ReduxState from './../../redux/state'\n\nimport JobMeta from '../../models/job_meta'\nimport { Form, Button } from 'react-bootstrap'\nimport JsonEditor from '../misc/json_editor'\nimport HumanDuration from '../../components/misc/human_duration'\n\nimport Scheduler from \"../../models/scheduler\";\n\ntype Props = {\n    jobMetas?: JobMeta[]\n    value: Scheduler\n    onChange: (newValue: Scheduler) => any\n}\n\ntype State = {}\n\nclass SchedulerForm extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n        this.state = {}\n        this.onChange = this.onChange.bind(this)\n    }\n\n    render() {\n        const { value } = this.props\n        const sortedJobMetas = (this.props.jobMetas || []).sort(function (a, b) {\n            return a.Title.localeCompare(b.Title);\n        })\n\n        return (\n            <div>\n                <Form.Group>\n                    <Form.Label>SID</Form.Label>\n                    <Form.Control as=\"select\" custom\n                                  value={value.JobType}\n                                  onChange={e => {\n                                      value.JobType = e.currentTarget.value\n                                      this.onChange(value)\n                                  }}\n                    >\n                        <option className=\"text-muted\" value=\"\">Choose job to create</option>\n                        {sortedJobMetas.map(jobMeta => {\n                            return (<option value={jobMeta.SID}>{jobMeta.Title}</option>)\n                        })}\n                    </Form.Control>\n                </Form.Group>\n                <Form.Group>\n                    {this.renderInputEditor()}\n\n                    <blockquote className=\"blockquote\">\n                        <p className=\"mb-0\">{JSON.stringify(value.JobInput)}</p>\n                        <footer className=\"blockquote-footer\">job input</footer>\n                    </blockquote>\n\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>RunEverySeconds</Form.Label>\n                    <Form.Control type=\"number\"\n                                  value={value.RunEverySeconds}\n                                  onChange={e => {\n                                      value.RunEverySeconds = parseInt(e.currentTarget.value, 10)\n                                      this.onChange(value)\n                                  }}\n                    />\n\n                    <blockquote className=\"blockquote\">\n                        <HumanDuration seconds={value.RunEverySeconds}/>\n                    </blockquote>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Check type=\"checkbox\" label=\"Stopped\"\n                        checked={value.Stopped}\n                        onChange={e => {\n                            value.Stopped = e.currentTarget.checked\n                            this.onChange(value)\n                        }}\n                    />\n                </Form.Group>\n            </div>\n        );\n    }\n\n    renderInputEditor() {\n        const { value } = this.props\n        if (!value.JobType) { return null }\n\n        const jobMeta = (this.props.jobMetas || []).find(c => c.SID === value.JobType)\n        if (!jobMeta) { return }\n\n        if (!jobMeta.InputJSONSchema) {\n            return (\n                <div className=\"alert alert-primary\">\n                    No input JSON schema defined for this Job\n                </div>\n            )\n        }\n\n        const jsonSchema = JSON.parse(jobMeta.InputJSONSchema!)\n        return (\n            <JsonEditor\n                key={`${value.ID}-${value.JobType}`}\n                label=\"Input\"\n                jsonSchema={jsonSchema}\n                defaultValue={JSON.parse(value.JobInput || \"{}\")}\n                onChange={newValue => {\n                    value.JobInput = JSON.stringify(newValue)\n                    this.onChange(value)\n                }}\n            />\n        )\n    }\n\n    onChange(model: Scheduler) {\n        const clone = new Scheduler(model)\n        this.props.onChange(clone)\n    }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: Props) => ({\n    jobMetas: state.jobMetas,\n})\nconst mapDispatchToProps = (dispatch: any, ownProps: Props) => ({})\n\nexport default ReactRedux.connect(mapStateToProps, mapDispatchToProps)(SchedulerForm)\n","import React from 'react'\nimport * as ReactRedux from 'react-redux'\nimport ReduxState from './../redux/state'\nimport * as ReactRouter from 'react-router'\n\nimport { Button } from 'react-bootstrap'\n\nimport Form from '../components/schedulers/form'\n\nimport Actions from '../redux/actions/schedulers'\nimport Scheduler from \"../models/scheduler\";\n\ntype Props = {\n  create?: (scheduler: Scheduler) => Promise<any>\n} & ReactRouter.RouteComponentProps<{}>\n\ntype State = {\n  model: Scheduler\n}\n\nclass App extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    this.state = {\n      model: new Scheduler({\n        Stopped: false\n      })\n    }\n    this.onSubmit = this.onSubmit.bind(this)\n    this.onChange = this.onChange.bind(this)\n  }\n\n  render() {\n    const { model } = this.state\n\n    return (\n      <>\n        <h3>Create scheduler</h3>\n        <Form\n          value={model}\n          onChange={this.onChange}\n        />\n        <Button variant=\"light\" className=\"w-100\"\n          onClick={this.onSubmit}\n        >\n          Create\n        </Button>\n      </>\n    );\n  }\n\n  onChange(model: Scheduler) {\n    this.setState({\n      model\n    })\n  }\n\n  private async onSubmit() {\n    await this.props.create!(this.state.model)\n    alert(\"Done, sir!\")\n    this.props.history.push(`/schedulers/index`)\n  }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: Props) => ({})\nconst mapDispatchToProps = (dispatch: any, ownProps: Props) => ({\n  create: (scheduler: Scheduler) => dispatch(Actions.create(scheduler)),\n})\n\nexport default ReactRedux.connect(mapStateToProps, mapDispatchToProps)(App)\n","import React from 'react'\nimport * as ReactRedux from 'react-redux'\nimport ReduxState from './../redux/state'\nimport * as ReactRouter from 'react-router'\n\nimport { Button } from 'react-bootstrap'\n\nimport Form from '../components/schedulers/form'\n\nimport Actions from '../redux/actions/schedulers'\nimport Scheduler from \"../models/scheduler\";\n\ntype Props = {\n    show?: (id: number) => Promise<Scheduler>\n    update?: (scheduler: Scheduler) => Promise<any>\n} & ReactRouter.RouteComponentProps<{\n    id: string\n}>\n\ntype State = {\n    model: Scheduler\n}\n\nclass App extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n        this.state = {\n            model: new Scheduler({})\n        }\n        this.onSubmit = this.onSubmit.bind(this)\n        this.onChange = this.onChange.bind(this)\n    }\n\n    async componentDidMount() {\n        const idStr = this.props.match.params.id\n        const id = parseInt(idStr, 10)\n        const model = await this.props.show!(id)\n        this.setState({ model })\n    }\n\n    render() {\n        const { model } = this.state\n\n        return (\n            <>\n                <h3>Update scheduler</h3>\n                <Form\n                    value={model}\n                    onChange={this.onChange}\n                />\n                <Button variant=\"light\" className=\"w-100\"\n                        onClick={this.onSubmit}\n                >\n                    Update\n                </Button>\n            </>\n        );\n    }\n\n    onChange(model: Scheduler) {\n        this.setState({\n            model\n        })\n    }\n\n    private async onSubmit() {\n        await this.props.update!(this.state.model)\n        alert(\"Done, sir!\")\n        this.props.history.push(`/schedulers/index`)\n    }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: Props) => ({})\nconst mapDispatchToProps = (dispatch: any, ownProps: Props) => ({\n    show: (id: number) => dispatch(Actions.show(id)),\n    update: (scheduler: Scheduler) => dispatch(Actions.update(scheduler)),\n})\n\nexport default ReactRedux.connect(mapStateToProps, mapDispatchToProps)(App)","import React from 'react'\nimport { Switch, Route } from 'react-router'\n\nimport Index from './pages/index'\nimport New from './pages/new'\nimport SchedulersIndex from './pages/schedulers_index'\nimport SchedulersNew from './pages/schedulers_new'\nimport SchedulersEdit from './pages/schedulers_edit'\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/index\" exact component={Index}/>\n      <Route path=\"/new\" exact component={New}/>\n      <Route path=\"/schedulers/index\" exact component={SchedulersIndex}/>\n      <Route path=\"/schedulers/new\" exact component={SchedulersNew}/>\n      <Route path=\"/schedulers/edit/:id\" exact component={SchedulersEdit}/>\n      <Route component={Index}/>\n    </Switch>\n  )\n}\n\nexport default Router","import React from 'react'\nimport * as ReactRedux from 'react-redux'\nimport ReduxState from './redux/state'\n\nimport JobMeta from './models/job_meta'\nimport JobMetaActions from './redux/actions/job_metas'\n\nimport { Row, Col } from 'react-bootstrap'\n\nimport Layout from './components/layout'\nimport Router from './router'\n\nimport { ConnectedRouter } from 'connected-react-router'\nimport { history } from './redux/store'\n\ntype Props = {\n  indexJobMetas?: () => any\n}\nclass App extends React.Component<Props> {\n  componentDidMount() {\n    this.props.indexJobMetas!()\n  }\n\n  render() {\n    return (\n      <ConnectedRouter history={history}>\n        <Layout>\n          <Row>\n            <Col md={12} className=\"pt-2\">\n              <Router/>\n            </Col>\n          </Row>\n        </Layout>\n      </ConnectedRouter>\n    );\n  }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: Props) => ({})\nconst mapDispatchToProps = (dispatch: any, ownProps: Props) => ({\n  indexJobMetas: () => dispatch(JobMetaActions.index()),\n})\n\nexport default ReactRedux.connect(mapStateToProps, mapDispatchToProps)(App)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport \"@fontsource/montserrat\"\nimport \"./styles.css\"\n\nimport { Provider } from 'react-redux'\nimport { store } from './redux/store'\n\nimport App from './app';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}