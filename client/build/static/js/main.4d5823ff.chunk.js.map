{"version":3,"sources":["serviceWorker.ts","lib/http.ts","services/api.ts","redux/actions/app.ts","redux/reducers/app.ts","models/job.ts","services/tree.ts","services/jobs.ts","redux/actions/jobs.ts","redux/reducers/jobs.ts","models/job_meta.ts","services/job_metas.ts","redux/actions/job_metas.ts","redux/reducers/job_metas.ts","redux/reducers/index.ts","redux/middlewares/plain_object_middleware.ts","redux/store.ts","components/layout.tsx","components/misc/human_duration.tsx","components/jobs/status.tsx","models/job_log.ts","services/job_logs.ts","models/scheduler.ts","components/jobs/item.tsx","components/tree/leaf.tsx","components/tree/leaves.tsx","components/misc/paginator.tsx","components/jobs/filters.tsx","pages/index.tsx","pages/online.tsx","components/misc/json_editor.tsx","pages/new.tsx","services/schedulers.ts","redux/actions/schedulers.ts","components/schedulers/item.tsx","pages/schedulers_index.tsx","components/misc/server_time.tsx","components/schedulers/form.tsx","pages/schedulers_new.tsx","pages/schedulers_edit.tsx","router.tsx","app.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","DEFAULT_HEADERS","makeRequest","method","url","a","data","headers","Object","assign","dataToSend","values","some","v","File","_data","FormData","keys","key","append","Axios","request","responseType","params","undefined","response","status","e","Error","__SERVER_SIDE_ERRORS__","errors","get","post","put","del","protocol","BASE","origin","API_BASE","URLS","ws","split","highkick","hello","jobs","job","id","retry","retryFailedLeaves","subtree","input","run","destroy","jobRoots","index","active","jobLogs","jobId","jobMetas","schedulers","create","update","show","CHANGE_viewJSONlikeAPro","newValue","type","dispatch","getState","HTTP","API","changeViewJSONlikeAPro","defaultState","viewJSONlikeAPro","reducer","state","action","Job","props","prop","path","sid","output","treeStatus","createdAt","cron","logsCount","StartedAt","FinishedAt","childs","childrenStatuses","this","isRoot","ids","map","i","parseInt","length","childsDigest","c","digest","join","Moment","diff","json","compose","rootId","items","root","find","composeSubTree","leaf","filter","l","parentID","filters","rootJsons","roots","deserialize","responseJson","childrenStats","ChildrenStats","Items","cs","RootID","ChildrenStatuses","jsons","updatedJob","Tree","SID","Input","loadRoots","loadSubtree","statuses","push","s","every","getInput","runJob","loadActiveRoots","INDEX","Update","Index","Destroy","Jobs","Actions","newJob","existingJob","j","unshift","slice","indexOf","JobMeta","Title","InputJSONSchema","JobMetas","rootReducer","history","combineReducers","router","connectRouter","app","actionToPlainObjectMiddleware","store","next","val","composeEnhancers","Redux","__USE_MEMORY_HISTORY__","History","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","enhancers","routerMiddleware","ReduxThunk","preloadedState","createRootReducer","createStore","Layout","isWidget","widget","Navbar","bg","variant","className","Brand","href","src","height","width","to","Container","children","HumanDuration","seconds","hours","Math","floor","minutes","StatusComponent","JobLog","content","reverse","SchedulerType","loadLogs","JobComponent","showLogs","showInputOutput","loadItem","bind","item","expanded","JSON","parse","jobMeta","candidate","statusBackground","style","display","gridTemplateAreas","gridTemplateColumns","gridGap","background","stringify","gridArea","cursor","renderStatus","Button","onClick","format","durationSeconds","zoom","collapsed","fontSize","displayDataTypes","jobLog","onExpand","JobLogs","setState","confirm","React","Component","ReactRedux","ownProps","TreeLeafComponent","updatedItem","builder","createElement","classnames","TreeLeaves","Paginator","onPageLinkClick","maxPage","Array","apply","renderPageLink","pageNumber","current","page","border","event","preventDefault","onPageChange","FiltersComponent","onChange","value","sort","b","name","Type","formData","currentTarget","RootsList","loading","onFiltersChange","loadItems","then","defaultChecked","checked","htmlFor","Item","newPage","max","AppActions","pollInterval","pulseIndicatorEl","createRef","touchPulseIndicator","setInterval","clearInterval","ref","renderPage","onlineRoot","classList","add","setTimeout","remove","MyJSONEditor","elRef","jsonEditor","JSONEditor","theme","schema","jsonSchema","disable_array_reorder","array_controls_top","form_name_root","label","no_additional_properties","show_errors","object_layout","remove_empty_properties","setValue","defaultValue","on","getValue","App","onJobSIDChange","onSubmit","sortedJobMetas","localeCompare","Form","Group","Label","Control","as","custom","renderInputEditor","jobSID","alert","reload","target","Scheduler","ID","JobType","JobInput","RunEverySeconds","ExactTimes","Stopped","UpdatedAt","LastRunAt","LastError","scheduler","Schedulers","Timer","ExactTime","indexSchedulers","SchedulerActions","ServerTime","serverTime","SchedulerForm","trim","Check","model","clone","idStr","Router","exact","component","Online","New","SchedulersIndex","SchedulersNew","SchedulersEdit","indexJobMetas","Row","Col","md","JobMetaActions","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4d5823ff.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import Axios from 'axios'\n\ntype HTTP_METHOD = 'get' | 'post' | 'put' | 'delete'\n\nconst DEFAULT_HEADERS = {\n  'Accept': 'application/json',\n  'Content-Type': 'application/json',\n}\n\nasync function makeRequest(method: HTTP_METHOD, url: string, data: any = null) {\n  const headers = Object.assign({}, DEFAULT_HEADERS)\n  let dataToSend = Object.assign({}, data)\n\n  // File uploading\n  //\n  const hasFiles = ((<any>Object).values(dataToSend).some((v: any) => v instanceof File))\n  if (hasFiles) {\n    headers['Content-Type'] = 'multipart/form-data'\n    const _data = new FormData()\n    for (const key of Object.keys(dataToSend)) {\n      _data.append(key, dataToSend[key])\n    }\n    dataToSend = _data\n  }\n\n  let response \n  try {\n    response = await Axios.request({\n      method, url, \n      data: dataToSend,\n      headers: headers,\n      // withCredentials: true,\n      responseType: 'json',\n      params: (method === 'get') ? dataToSend : undefined\n    })\n  } catch (error) {\n    if (!error.response) {\n      throw error\n    }\n    \n    if (error.response.status === 422) {\n      const e: any = new Error('422 response')\n       // NOTE: Client-server integration convention\n      e.__SERVER_SIDE_ERRORS__ = error.response.data.errors\n      throw e\n    }\n\n    throw error\n  }\n  \n  return response.data\n}\n\nasync function get(url: string, data: any = {}) {\n  return makeRequest('get', url, data)\n}\n\nasync function post(url: string, data: any = null) {\n  return makeRequest('post', url, data)\n}\n\nasync function put(url: string, data: any = null) {\n  return makeRequest('put', url, data)\n}\n\nasync function del(url: string, data: any = null) {\n  return makeRequest('delete', url, data)\n}\n\nexport default { get, post, put, del }\n","const {protocol, hostname} = window.location\n\nconst env = process.env.NODE_ENV\n\nconst BASE = {\n  'development': `${protocol}//${hostname}:8000`,\n  'production': window.location.origin,\n  'test': window.location.origin\n}[env]\n\nconst API_BASE = `${BASE}/highkick`\n\nconst URLS = {\n  ws: `ws${window.location.protocol === 'https:' ? 's' : ''}://${API_BASE.split(\"//\")[1]}/ws`,\n  highkick: {\n    hello: `${API_BASE}/highkick/hello`,\n  },\n  jobs: {\n    job: (id: number) => `${API_BASE}/jobs/show/${id}`,\n    retry: (id: number) => `${API_BASE}/jobs/retry/${id}`,\n    retryFailedLeaves: (id: number) => `${API_BASE}/jobs/retry_failed_leaves/${id}`,\n    subtree: (id: number) => `${API_BASE}/jobs/subtree/${id}`,\n    input: (id: number) => `${API_BASE}/jobs/input/${id}`,\n    run: `${API_BASE}/jobs/run`,\n    destroy: (id: number) => `${API_BASE}/jobs/delete/${id}`,\n  },\n  jobRoots: {\n    index: `${API_BASE}/job_roots/index`,\n    active: `${API_BASE}/job_roots/active`\n  },\n  jobLogs: {\n    index: (jobId: number) => `${API_BASE}/job_logs/index/${jobId}`,\n  },\n  jobMetas: {\n    index: `${API_BASE}/job_metas/index`,\n  },\n  schedulers: {\n    index: `${API_BASE}/schedulers/index`,\n    create: `${API_BASE}/schedulers/create`,\n    update: (id: number) => `${API_BASE}/schedulers/update/${id}`,\n    destroy: (id: number) => `${API_BASE}/schedulers/destroy/${id}`,\n    show: (id: number) => `${API_BASE}/schedulers/show/${id}`,\n  }\n}\n\nexport default { URLS }","import ReduxState from '../state'\n\nimport HTTP from '../../lib/http'\nimport API from '../../services/api'\nexport const CHANGE_VIEWJSONLIKEAPRO = 'CHANGE_VIEWJSONLIKEAPRO'\n\nexport class CHANGE_viewJSONlikeAPro {\n  type = CHANGE_VIEWJSONLIKEAPRO\n  constructor(public newValue: boolean) { }\n}\n\nfunction changeViewJSONlikeAPro(newValue: boolean) {\n  return async (dispatch: any, getState: () => ReduxState) => {\n    dispatch(new CHANGE_viewJSONlikeAPro(newValue))\n  }\n}\n\nexport type Hello = {\n  ServerTime: string\n}\n\nfunction hello() {\n  return async (dispatch: any, getState: () => ReduxState) => {\n    const response = await HTTP.get(API.URLS.highkick.hello) as Hello\n    return response\n  }\n}\n\nexport default { hello, changeViewJSONlikeAPro }","import * as Actions from '../actions/app'\n\nexport type State = {\n  viewJSONlikeAPro: boolean\n}\n\nconst defaultState: State = {\n  viewJSONlikeAPro: true\n}\n\ntype Action = Actions.CHANGE_viewJSONlikeAPro\nexport default function reducer(state: State = defaultState, action: Action) {\n  switch (action.type) {\n    case Actions.CHANGE_VIEWJSONLIKEAPRO: {\n      const a = action as Actions.CHANGE_viewJSONlikeAPro\n      return Object.assign({}, state, {\n        viewJSONlikeAPro: a.newValue\n      } as Partial<State>)\n    }\n  }\n\n  return state\n}","import TreeLeaf from './tree_leaf'\nimport Moment from 'moment'\n\nexport type Status = 'scheduled' | 'initial' | 'processing' | 'failed' | 'completed'\n\ntype Props = {\n  id: number\n  type: string\n  path: string\n  sid: string\n  input: string\n  output: string\n  status: Status\n  treeStatus?: Status\n  createdAt: string\n  cron?: string\n  logsCount: number\n  StartedAt: string\n  FinishedAt: string\n\n  childs: Job[]\n  childrenStatuses: {[status: string]: number}\n}\n\nclass Job implements Props, TreeLeaf {\n  id: number = 0\n  type: string = ''\n  path: string = ''\n  sid: string = ''\n  input: string = ''\n  output: string = ''\n  status: Status = 'initial'\n  treeStatus?: Status = undefined\n  createdAt: string = ''\n  cron?: string = undefined\n  logsCount: number = 0\n  StartedAt: string = ''\n  FinishedAt: string = ''\n\n  childs: Job[] = []\n  childrenStatuses: {[status: string]: number} = {}\n\n  constructor(props: Partial<Props>) {\n    // super()\n    for(const prop in props) {\n      (this as any)[prop] = (props as any)[prop]\n    }\n  }\n\n  isRoot() {\n    return this.path === ''\n  }\n\n  isPeriodical() {\n    return this.cron !== undefined\n  }\n\n  parentID() {\n    if (this.isRoot()) {\n      return null\n    }\n    const ids = this.path.split('/').map(i => parseInt(i))\n    return ids[ids.length - 1]\n  }\n\n  // TODO: use hash function\n  digest(): string {\n    const childsDigest = this.childs.map(c => c.digest()).join()\n    return `${this.id}${this.status}${this.treeStatus}${childsDigest}`\n  }\n\n  static deserialize(json: any): Job {\n    const job = new Job(json as Partial<Props>)\n    return job\n  }\n\n  durationSeconds() {\n    if (!this.StartedAt || !this.FinishedAt) { return 0 }\n    var durMilisecs = Moment(this.FinishedAt).diff(Moment(this.StartedAt))\n    return durMilisecs / 1000\n  }\n}\n\nexport default Job","import TreeLeaf from '../models/tree_leaf'\n\nfunction compose<Item extends TreeLeaf>(params: {\n  rootId: number,\n  items: Item[]\n}) {\n  const { rootId, items } = params\n\n  const root = items.find(i => i.id === rootId)\n  if (!root) {\n    throw new Error('No root found')\n  }\n\n  const composeSubTree = (leaf: TreeLeaf) => {\n    leaf.childs = items.filter(l => l.parentID() === leaf.id)\n    for(const child of leaf.childs) {\n      composeSubTree(child)\n    }\n  }\n\n  composeSubTree(root)\n  return root\n}\n\nexport default { compose }","import Job, { Status } from '../models/job'\nimport Filters from '../models/filters'\n\nimport API from './api'\nimport HTTP from '../lib/http'\n\nimport Tree from './tree'\n\nasync function loadRoots(filters: Filters, params: { page: number }) {\n  const data = Object.assign({}, params, { filters })\n  const url = API.URLS.jobRoots.index\n  const rootJsons = await HTTP.get(url, data)\n  const roots = rootJsons.map(Job.deserialize)\n  return roots\n}\n\nasync function loadActiveRoots(filters: Filters) {\n  const data = Object.assign({}, { filters })\n  const url = API.URLS.jobRoots.active\n  const responseJson = await HTTP.get(url, data)\n  const childrenStats= responseJson.ChildrenStats as {RootID: number, ChildrenStatuses: {[status: string]: number}}[]\n  \n  let roots = (responseJson.Items as any[]).map(Job.deserialize)\n  roots = roots.map(root => {\n    root.childrenStatuses = childrenStats.find(cs => cs.RootID === root.id)!.ChildrenStatuses\n    return root\n  })\n\n  return roots\n}\n\nasync function loadSubtree(job: Job) {\n  const jsons = await HTTP.get(API.URLS.jobs.subtree(job.id))\n  const jobs = jsons.map(Job.deserialize)\n  const updatedJob = Tree.compose<Job>({\n    items: jobs,\n    rootId: job.id\n  })\n  return updatedJob\n}\n\nasync function retry(job: Job) {\n  await HTTP.post(API.URLS.jobs.retry(job.id))\n}\n\nasync function retryFailedLeaves(job: Job) {\n  await HTTP.post(API.URLS.jobs.retryFailedLeaves(job.id))\n}\n\nasync function destroy(job: Job) {\n  const url = API.URLS.jobs.destroy(job.id)\n  await HTTP.del(url)\n}\n\nfunction treeStatus(job: Job): Status {\n  const statuses = job.childs.map(treeStatus)\n  statuses.push(job.status)\n  if (!!job.treeStatus) { statuses.push(job.treeStatus) }\n\n  if (statuses.some(s => s === 'processing')) {\n    return 'processing'\n  }\n\n  if (statuses.some(s => s === 'failed')) {\n    return 'failed'\n  }\n\n  if (statuses.every(s => s === 'completed')) {\n    return 'completed'\n  }\n\n  if (statuses.every(s => s === 'initial')) {\n    return 'initial'\n  }\n\n  return 'processing'\n}\n\nasync function getInput(job: Job) {\n  const url = API.URLS.jobs.input(job.id)\n  const data = await HTTP.get(url)\n  return data\n}\n\nasync function runJob(sid: string, input: any) {\n  const url = API.URLS.jobs.run\n  const response = await HTTP.post(url, {\n    SID: sid,\n    Input: input,\n  })\n  return response\n}\n\nexport default { \n  loadRoots, loadSubtree, retry, retryFailedLeaves,\n  destroy, treeStatus, getInput,\n  runJob,\n  loadActiveRoots,\n}\n","import ReduxState from '../state'\nimport Job from '../../models/job'\nimport Filters from '../../models/filters'\n\nimport Jobs from '../../services/jobs'\n\n// Types\n\nexport const INDEX = 'JOBS/INDEX'\nexport const UPDATE = 'JOBS/UPDATE'\nexport const DESTROY = 'JOBS/DESTROY'\n\n// Actions\n\nexport class Update {\n  type = UPDATE\n  constructor(public job: Job) { }\n}\n\nexport class Index {\n  type = INDEX\n  constructor(public jobs: Job[]) { }\n}\n\nexport class Destroy {\n  type = DESTROY\n  constructor(public job: Job) { }\n}\n\n// Action creators\n\nfunction index(filters: Filters, params: { page: number }) {\n  return async (dispatch: any, getState: () => ReduxState) => {\n    const jobs = await Jobs.loadRoots(filters, params)\n    dispatch(new Index(jobs))\n  }\n}\n\nfunction loadActiveRoots(filters: Filters) {\n  return async (dispatch: any, getState: () => ReduxState) => {\n    const roots = await Jobs.loadActiveRoots(filters)\n    return roots\n  }\n}\n\nfunction loadSubtree(job: Job) {\n  return async (dispatch: any, getState: () => ReduxState) => {\n    let updatedJob = await Jobs.loadSubtree(job)\n    dispatch(new Update(updatedJob)) // dispatch redux\n    return updatedJob // and return value at same moment\n  }\n}\n\nfunction destroy(job: Job) {\n  return async (dispatch: any, getState: () => ReduxState) => {\n    await Jobs.destroy(job)\n    dispatch(new Destroy(job))\n  }\n}\n\nfunction getInput(job: Job) {\n  return async (dispatch: any, getState: () => ReduxState) => {\n    const input = await Jobs.getInput(job)\n    return input\n  }\n}\n\nfunction run(sid: string, input: any) {\n  return async (dispatch: any, getState: () => ReduxState) => {\n    const response = await Jobs.runJob(sid, input)\n    return response\n  }\n}\n\nexport default { index, loadSubtree, destroy, getInput, run, loadActiveRoots }","import * as Actions from '../actions/jobs'\nimport Job from '../../models/job'\n\nexport type State = Job[]\n\nconst defaultState: State = []\n\ntype Action = Actions.Index | Actions.Update | Actions.Destroy\nexport default function reducer(state: State = defaultState, action: Action) {\n  switch (action.type) {\n    case Actions.INDEX: {\n      const a = action as Actions.Index\n      return a.jobs\n    }\n    case Actions.UPDATE: {\n      const a = action as Actions.Update\n      const newJob = a.job\n      \n      const existingJob = state.find((j: Job) => j.id === a.job.id)\n\n      // New root job\n      if (!existingJob && newJob.isRoot()) {\n        state.unshift(newJob)\n        return state.slice(0)\n      }\n\n      // In the list already\n      if (existingJob) {\n        const index = state.indexOf(existingJob)\n        state[index] = newJob\n        return state.slice(0)\n      }\n      \n      return state\n    }\n  }\n\n  return state\n}","type Props = {\n  SID: string\n  Title: string\n  InputJSONSchema?: string\n}\n\nclass JobMeta implements Props {\n  SID!: string\n  Title!: string\n  InputJSONSchema?: string\n\n  constructor(props: Partial<Props>) {\n    // super()\n    for(const prop in props) {\n      (this as any)[prop] = (props as any)[prop]\n    }\n  }\n\n  static deserialize(json: any): JobMeta {\n    const job = new JobMeta(json as Partial<Props>)\n    return job\n  }\n}\n\nexport default JobMeta","import JobMeta from '../models/job_meta'\n\nimport API from './api'\nimport HTTP from '../lib/http'\n\nasync function index() {\n  const url = API.URLS.jobMetas.index\n  const response = await HTTP.get(url, {})\n  const items = (response.items as any[]).map(JobMeta.deserialize)\n  return items\n}\n\nexport default { index }\n","import ReduxState from '../state'\nimport JobMeta from '../../models/job_meta'\nimport Filters from '../../models/filters'\n\nimport JobMetas from '../../services/job_metas'\n\n// Types\n\nexport const INDEX = 'JOB_METAS/INDEX'\n\n// Actions\n\nexport class Index {\n  type = INDEX\n  constructor(public items: JobMeta[]) { }\n}\n\n// Action creators\n\nfunction index() {\n  return async (dispatch: any, getState: () => ReduxState) => {\n    const items = await JobMetas.index()\n    dispatch(new Index(items))\n  }\n}\n\nexport default { index }","import * as Actions from '../actions/job_metas'\nimport JobMeta from '../../models/job_meta'\n\nexport type State = JobMeta[]\n\nconst defaultState: State = []\n\ntype Action = Actions.Index\nexport default function reducer(state: State = defaultState, action: Action) {\n  switch (action.type) {\n    case Actions.INDEX: {\n      const a = action as Actions.Index\n      return a.items\n    }\n  }\n  return state\n}","import { combineReducers } from 'redux'\nimport { connectRouter } from 'connected-react-router'\n\nimport app from './app'\nimport jobs from './jobs'\nimport jobMetas from './job_metas'\n\nconst rootReducer = (history: any) => combineReducers({\n  router: connectRouter(history),\n  app,\n  jobs,\n  jobMetas,\n})\n\nexport default rootReducer","import * as Redux from 'redux'\n\n// Middleware for allowing actions to be class instances\nconst actionToPlainObjectMiddleware: Redux.Middleware<any, any> = store => next => action => {\n  function isObjectLike(val: any): val is {} {\n    return val !== undefined && val !== null && typeof val === 'object'\n   }\n  if (isObjectLike(action)) {\n    return next({ ...action } as any)\n  }\n  return next(action)\n}\n\nexport default actionToPlainObjectMiddleware","import * as Redux from 'redux'\nimport ReduxThunk from 'redux-thunk'\n\nimport * as History from 'history'\nimport { routerMiddleware } from 'connected-react-router'\n\nimport createRootReducer from './reducers'\n\nimport actionToPlainObjectMiddleware from './middlewares/plain_object_middleware'\n\ndeclare var window: {\n  __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: any,\n  __USE_MEMORY_HISTORY__?: boolean\n}\n\nlet composeEnhancers = Redux.compose\n\n// Create an enhanced history that syncs navigation events with the store\nconst history: History.History = !!window.__USE_MEMORY_HISTORY__ ?\n  History.createMemoryHistory() : History.createHashHistory()\n\n// FIXME: https://github.com/zalmoxisus/redux-devtools-extension/issues/588\nif (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) {\n  composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n}\n\n// Build the middleware for intercepting and dispatching navigation actions\nconst middlewares = Redux.applyMiddleware(\n  routerMiddleware(history),\n  ReduxThunk,\n  actionToPlainObjectMiddleware\n)\nconst enhancers = composeEnhancers(middlewares)\n\nfunction createStore(preloadedState: any = {}) {\n  const rootReducer = createRootReducer(history)\n  const store = Redux.createStore(rootReducer, preloadedState, enhancers)\n  return store\n}\n\nconst store = createStore()\nexport { history, store, createStore }","import React from 'react';\nimport { Link } from 'react-router-dom'\n\nimport { Container, Navbar } from 'react-bootstrap'\n\ntype Props = React.PropsWithChildren<{\n  widget?: boolean\n}>\n\nconst Layout: React.FC<Props> = (props: Props) => {\n  const isWidget = props.widget || false\n\n  return (\n    <>\n      <Navbar bg=\"light\" variant=\"light\" className=\"border-dark border-bottom d-flex align-items-center\">\n        <Navbar.Brand href=\"\" className=\"p-0 flex-fill\">\n          <img src=\"favicon.ico\" height=\"32\" width=\"32\"/>\n          &nbsp;\n          <a href=\"/\" className=\"text-dark\">Highkick</a>\n        </Navbar.Brand>\n\n          <Link to=\"/online\" className=\"pr-2\">Online</Link>\n          <Link to=\"/index\" className=\"pr-2\">Jobs</Link>\n          <Link to=\"/schedulers/index\">Schedulers</Link>\n      </Navbar>\n      <Container className={isWidget ? \"m-0 p-0\" : undefined}>\n        { props.children }\n      </Container>\n    </>);\n}\n\nexport default Layout;\n","import React from 'react'\n\nfunction HumanDuration(props: {seconds: number}) {\n    const hour = 3600;\n    const minute = 60;\n\n    let { seconds } = props\n\n    const hours = Math.floor(seconds / hour);\n    seconds = seconds - hours * hour;\n\n    const minutes = Math.floor(seconds / minute);\n    seconds = seconds - minutes * minute;\n\n    return (\n        <span>\n            { hours > 0 && <>{hours}h</> }\n            { minutes > 0 && <>{minutes}m</> }\n            { seconds > 0 && <>{seconds}s</> }\n        </span>\n    )\n}\n\nexport default HumanDuration","import React from 'react'\nimport { XCircle, Play, Check2, Hexagon, HourglassSplit } from 'react-bootstrap-icons'\n\nimport { Status } from '../../models/job'\n\ntype Props = {\n  title?: string\n  status: Status\n}\n\nconst StatusComponent: React.FC<Props> = (props: Props) => {\n  const { status } = props\n\n  switch(status) {\n    case 'scheduled':\n      return <HourglassSplit/>\n    case 'initial':\n      return <Hexagon/>\n    case 'processing':\n      return <Play/>\n    case 'failed':\n      return <XCircle/>\n    case 'completed':\n      return <Check2/>\n  }\n\n  return null\n}\n\nexport default StatusComponent","type Props = {\n  id: number\n  content: string\n  createdAt: string\n}\n\nclass JobLog implements Props {\n  id: number = 0\n  content: string = ''\n  createdAt: string = ''\n\n  constructor(props: Partial<Props>) {\n    if(props.id) { this.id = props.id }\n    if(props.content) { this.content = props.content }\n    if(props.createdAt) { this.createdAt = props.createdAt }\n  }\n\n  static deserialize(json: any): JobLog {\n    const model = new JobLog(json as Partial<Props>)\n    return model\n  }\n}\n\nexport default JobLog","import Job from '../models/job'\nimport JobLog from '../models/job_log'\n\nimport API from './api'\nimport HTTP from '../lib/http'\n\nasync function loadLogs(job: Job) {\n  const data = await HTTP.get(API.URLS.jobLogs.index(job.id))\n  const roots = data.map(JobLog.deserialize).reverse()\n  return roots\n}\n\nexport default { loadLogs }\n","export enum SchedulerType {\n    Timer = \"timer\",\n    ExactTime = \"exact_time\"\n}\n\nclass Scheduler {\n    ID!: number\n    JobType!: string\n    JobInput!: string\n\n    SchedulerType!: SchedulerType\n    RunEverySeconds!: number\n    ExactTimes!: string[]\n\n    Stopped!: boolean\n    UpdatedAt!: string\n    \n    LastRunAt!: string\n    LastError!: string\n\n    constructor(props: Partial<Scheduler>) {\n        for(const prop in props) {\n            (this as any)[prop] = (props as any)[prop]\n        }\n    }\n}\n\nexport default Scheduler","import React from 'react'\nimport * as ReactRedux from 'react-redux'\nimport Moment from 'moment'\n\nimport ReduxState from './../../redux/state'\nimport Actions from '../../redux/actions/jobs'\n\nimport ReactJsonView from 'react-json-view'\nimport { Button } from 'react-bootstrap'\nimport { \n  ArrowRight, ArrowDown, ArrowClockwise, Trash,\n  ReceiptCutoff, BoxArrowInRight, BoxArrowRight,\n  ArrowLeftRight, Clock,\n} from 'react-bootstrap-icons'\nimport HumanDuration from '../misc/human_duration'\n\nimport StatusComponent from './status'\n\nimport Job, { Status } from '../../models/job'\nimport JobMeta from '../../models/job_meta'\nimport JobLog from '../../models/job_log'\nimport Jobs from '../../services/jobs'\nimport JobLogs from '../../services/job_logs'\n\ntype Props = {\n  item: Job\n  onExpand: (expanded: boolean, updatedItem: Job | undefined) => any\n  expanded: boolean\n\n  viewJSONlikeAPro?: boolean\n  jobMetas?: JobMeta[]\n  loadSubtree?: (job: Job) => Promise<Job>\n  destroy?: () => any\n  getInput?: () => Promise<any>\n}\n\ntype State = {\n  showLogs: boolean\n  jobLogs: JobLog[]\n  input: any\n  showInputOutput: boolean\n}\n\nclass JobComponent extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n\n    this.state = {\n      showLogs: false,\n      jobLogs: [],\n      input: null,\n      showInputOutput: false,\n    }\n\n    this.loadItem = this.loadItem.bind(this)\n    this.showLogs = this.showLogs.bind(this)\n    this.retry = this.retry.bind(this)\n    this.retryFailedLeaves = this.retryFailedLeaves.bind(this)\n    this.destroy = this.destroy.bind(this)\n    this.showInputOutput = this.showInputOutput.bind(this)\n  }\n\n  render() {\n    const { item, expanded, jobMetas } = this.props\n    const { input, jobLogs } = this.state\n    const output = item.output !== \"\" ? JSON.parse(item.output) : {}\n    const jobMeta = (jobMetas || []).find(candidate => candidate.SID === item.type)\n\n    const treeStatus = Jobs.treeStatus(item)\n    const statusBackground = function(status: Status): string {\n      return status === \"failed\" ? \"#fcede8\" : status === \"processing\" ? \"#e8f4fc\" : \"#f8f9fa\"\n    }\n\n    return (\n      <div \n        className=\"p-0 m-0\"\n        style={{\n          display: \"grid\",\n          gridTemplateAreas: \"'header actions' 'details details'\",\n          gridTemplateColumns: \"1fr 170px\",\n          gridGap: \"2px\",\n          background: statusBackground(treeStatus),\n        }}\n        key={JSON.stringify(jobMeta)}\n      >\n        <div \n          style={{\n            gridArea: \"header\",\n            cursor: 'pointer'\n          }}\n          className=\"d-flex align-items-center\"\n        >\n          {this.renderStatus()}\n          <span className=\"ml-1 mr-1\">\n            {jobMeta?.Title || item.sid}\n          </span>\n          <small className=\"text-muted ml-2 mr-2\">\n            {item.id}\n          </small>\n          <Button variant=\"light\"\n            className={this.state.showInputOutput ? undefined : \"text-muted\"}\n            onClick={() => this.showInputOutput(!this.state.showInputOutput)}\n          ><ArrowLeftRight/></Button>\n          { (item.logsCount > 0) && (\n              <Button variant=\"light\"\n                      className={this.state.showLogs ? undefined : \"text-muted\"}\n                      onClick={() => this.showLogs(!this.state.showLogs)}\n              ><ReceiptCutoff/></Button>) }\n          <span onClick={this.loadItem} style={{cursor: 'pointer'}}>\n            { expanded ? <ArrowDown/> : <ArrowRight/> }\n          </span>\n          <div className=\"flex-fill\">\n            { (Object.keys(item.childrenStatuses || {}) as Status[]).map((key) => (\n              <>\n                { (item.childrenStatuses[key] > 0) && (\n                  <span className=\"badge\" style={{background: statusBackground(key)}}>\n                    { key } <span className=\"badge badge-light\">{item.childrenStatuses[key]}</span>\n                  </span>\n                ) }\n              </>\n            )) }\n          </div>\n          <small className=\"text-muted\">\n            {Moment(item.createdAt).format(\"MM-DD HH:mm\")}\n            { item.durationSeconds() > 0 && <>\n              <Clock/>\n              <HumanDuration seconds={item.durationSeconds()}/>\n            </> }\n          </small>\n        </div>\n\n        <div style={{ gridArea: \"actions\" }}\n          className=\"btn-group btn-group-sm\"\n        >\n          <Button variant=\"light\"\n            onClick={this.retry}\n          ><ArrowClockwise/></Button>\n          <Button variant=\"light\" onClick={this.destroy}\n          ><Trash/></Button>\n        </div>\n\n        <div\n          style={{ \n            gridArea: \"details\",\n          }}\n          className=\"d-flex flex-column\"\n        >\n          <div\n            style={{\n              display: this.state.showInputOutput ? 'flex' : 'none'\n            }}\n          >\n            <div className=\"d-flex align-items-center\">\n              <BoxArrowInRight className=\"m-2\" style={{zoom: 1.5}}/>\n              { this.props.viewJSONlikeAPro && (<>\n                { !!input && <ReactJsonView src={input} collapsed={true} style={{fontSize: 10}} displayDataTypes={false}/> }\n                { !input && <>&mdash;</> }\n              </>) }\n              { !this.props.viewJSONlikeAPro && (\n                <code style={{fontSize: 10}}>{JSON.stringify(input, null, 2)}</code>\n              ) }\n            </div>\n            <div className=\"d-flex align-items-center\">\n              <BoxArrowRight className=\"m-2\" style={{zoom: 1.5}}/>\n              { this.props.viewJSONlikeAPro && (<>\n                { !!output && <ReactJsonView src={output} collapsed={true} style={{fontSize: 10}} displayDataTypes={false}/> }\n                { !output && <>&mdash;</> }\n              </>) }\n              { !this.props.viewJSONlikeAPro && (\n                <code style={{fontSize: 10}}>{JSON.stringify(output, null, 2)}</code>\n              ) }\n            </div>\n          </div>\n          \n          <div\n            style={{\n              display: this.state.showLogs ? 'block' : 'none'\n            }}\n          >\n            { jobLogs.map(jobLog => {\n              return (\n                <div className=\"alert alert-primary p-0 d-flex\" key={jobLog.id}>\n                  <small className=\"text-muted mr-2\">{jobLog.createdAt}</small>\n                  <code className=\"flex-fill\">{jobLog.content}</code>\n                </div>)\n            }) }\n          </div>\n        </div>\n      </div>)\n  }\n\n  private renderStatus() {\n    const { item } = this.props\n    const treeStatus = Jobs.treeStatus(item)\n\n    if (item.status === treeStatus) {\n      return <StatusComponent status={item.status}/>\n    }\n\n    return [\n      <StatusComponent status={treeStatus}/>,\n      <StatusComponent status={item.status}/>\n    ]\n  }\n\n  private async loadItem() {\n    const { item, expanded } = this.props\n    if (!expanded) {\n      const updatedJob = await this.props.loadSubtree!(item)\n      this.props.onExpand(true, updatedJob)\n    } else {\n      this.props.onExpand(false, undefined)\n    }\n  }\n\n  private async showLogs(showLogs: boolean) {\n    const { item } = this.props\n    if (showLogs) {\n      let jobLogs = await JobLogs.loadLogs(item)\n      this.setState({ showLogs, jobLogs })\n    } else {\n      this.setState({ showLogs })\n    }\n  }\n\n  private retry() {\n    const { item } = this.props;\n    if (window.confirm('Do you wanna to retry this job?') === false) {\n      return\n    }\n\n    (async () => {\n      await Jobs.retry(item)\n    })()\n  }\n\n  private retryFailedLeaves() {\n    const { item } = this.props;\n    if (window.confirm('Do you wanna to retry failed children of this job?') === false) {\n      return\n    }\n\n    (async () => {\n      await Jobs.retryFailedLeaves(item)\n    })()\n  }\n\n  private destroy() {\n    if (window.confirm('Do you wanna to destroy this job?') === false) {\n      return\n    }\n    this.props.destroy!()\n  }\n\n  private async showInputOutput(showInputOutput: boolean) {\n    if (showInputOutput === true) {\n      const input = await this.props.getInput!()\n      this.setState({ input })\n    }\n    this.setState({ showInputOutput })\n  }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: Props) => ({\n  jobMetas: state.jobMetas,\n  viewJSONlikeAPro: state.app.viewJSONlikeAPro,\n})\nconst mapDispatchToProps = (dispatch: any, ownProps: Props) => {\n  const { item } = ownProps\n  return {\n    loadSubtree: (job: Job) => dispatch(Actions.loadSubtree(job)),\n    destroy: () => dispatch(Actions.destroy(item)),\n    getInput: () => dispatch(Actions.getInput(item)),\n  }\n}\n\nexport default ReactRedux.connect(mapStateToProps, mapDispatchToProps)(JobComponent)","import React from 'react'\nimport classnames from 'classnames'\n\nimport TreeLeaf from '../../models/tree_leaf'\nimport Builder from './builder'\nimport Leaves from './leaves'\n\ntype Props<Item> = {\n  item: Item\n  builder: Builder<Item>\n}\n\ntype State<Item> = {\n  expanded: boolean\n  updatedItem: Item | undefined\n}\n\nclass TreeLeafComponent<Item extends TreeLeaf> extends React.Component<Props<Item>, State<Item>> {\n  constructor(props: Props<Item>) {\n    super(props)\n\n    this.state = {\n      expanded: false,\n      updatedItem: undefined,\n    }\n\n    this.onExpand = this.onExpand.bind(this)\n  }\n\n  render() {\n    const { builder } = this.props\n    const { expanded, updatedItem } = this.state\n\n    const item = this.state.updatedItem || this.props.item\n\n    return (\n      <li className=\"list-group-item p-0 border-0 m-0 mb-1\" key={item.digest()}>\n        {React.createElement(builder, {\n          item,\n          onExpand: this.onExpand,\n          expanded,\n        })}\n        <div className={classnames({'d-none': !expanded, 'mt-1 ml-4': true})}>\n          <Leaves\n            items={item.childs as Item[]}\n            builder={builder}\n          />\n        </div>\n      </li>)\n  }\n\n  private onExpand(expanded: boolean, updatedItem: Item | undefined) {\n    this.setState({ expanded, updatedItem })\n  }\n}\n\nexport default TreeLeafComponent","import React from 'react'\nimport classnames from 'classnames'\n\nimport TreeLeafInterface from '../../models/tree_leaf'\nimport Builder from './builder'\nimport Leaf from './leaf'\n\ntype Props<Item> = {\n  items: Item[]\n  builder: Builder<Item>\n}\n\nclass TreeLeaves<Item extends TreeLeafInterface> extends React.Component<Props<Item>> {\n  render() {\n    const { items, builder } = this.props\n\n    return (\n      <ul className={classnames('list-group', 'list-group-flush', 'p-0')}>\n        { items.map(item => {\n          return (\n            <Leaf\n              key={item.id}\n              item={item}\n              builder={builder}\n            />)\n        }) }\n      </ul>)\n  }\n}\n\nexport default TreeLeaves","import React from 'react'\n\ntype Props = {\n  page: number\n  maxPage: number\n  onPageChange: (page: number) => any\n}\n\nclass Paginator extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props)\n    this.onPageLinkClick = this.onPageLinkClick.bind(this)\n  }\n\n  render() {\n    const { maxPage } = this.props\n\n    return (\n      <nav>\n        <ul className=\"pagination pagination-sm justify-content-center m-1\">\n          { Array.apply(null, Array(maxPage)).map((v, i) => {\n            return this.renderPageLink(i + 1)\n          }) }\n        </ul>\n      </nav>)\n  }\n\n  private renderPageLink(pageNumber: number) {\n    const { page } = this.props\n    const current = page === pageNumber\n\n    return (\n      <li \n        className=\"page-item\" key={pageNumber}\n        style={{cursor: 'pointer'}}\n      >\n        { current && (\n            <span \n              className=\"page-link text-muted\"\n              style={{border: 'none'}}\n            >{pageNumber}</span>) }\n      \n        { !current && (\n            <a \n              className=\"page-link\"\n              style={{border: 'none'}}\n              href=\"#\"\n              onClick={(event) => this.onPageLinkClick(event, pageNumber)}\n            >{pageNumber}</a>) }\n      </li>)\n  }\n\n  private onPageLinkClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>, page: number) {\n    event.preventDefault()\n    this.props.onPageChange(page)\n  }\n}\n\nexport default Paginator","import React from 'react'\nimport * as ReactRedux from 'react-redux'\nimport ReduxState from './../../redux/state'\n\nimport Filters from '../../models/filters'\nimport { Funnel } from 'react-bootstrap-icons'\nimport JobMeta from '../../models/job_meta'\n\ntype Props = {\n  jobMetas?: JobMeta[]\n  value: Filters\n  onChange: (value: Filters) => any\n}\n\nclass FiltersComponent extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props)\n    this.onChange = this.onChange.bind(this)\n  }\n\n  render() {\n    const { value } = this.props\n    const jobMetas = (this.props.jobMetas || []).sort((a, b) => {\n      return a.SID > b.SID ? 1 : -1\n    })\n\n    return (\n      <form onChange={this.onChange}>\n        <div className=\"d-flex align-items-center\">\n          <Funnel/>\n          <select \n            className=\"form-control form-control-sm\"\n            name=\"Type\"\n            value={value.Type}\n          >\n            <option></option>\n            { (jobMetas || []).map(jobMeta => (\n              <option value={jobMeta.SID}>{jobMeta.SID}</option>\n            ))}\n          </select>\n        </div>\n      </form>\n    )\n  }\n\n  private onChange(event: React.FormEvent<HTMLFormElement>) {\n    const formData = new FormData(event.currentTarget)\n    const value: Filters = {}\n    if (formData.get(\"Type\") !== \"\") { value.Type = formData.get(\"Type\") as string }\n    this.props.onChange(value)\n  }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: Props) => ({\n  jobMetas: state.jobMetas,\n})\nconst mapDispatchToProps = (dispatch: any, ownProps: Props) => ({})\nexport default ReactRedux.connect(mapStateToProps, mapDispatchToProps)(FiltersComponent)","import React from 'react'\nimport * as ReactRedux from 'react-redux'\nimport ReduxState from '../redux/state'\nimport Actions from '../redux/actions/jobs'\nimport AppActions from '../redux/actions/app'\nimport { Link as RouterLink } from 'react-router-dom'\nimport { PlusCircle } from 'react-bootstrap-icons'\n\nimport Job from '../models/job'\nimport JobMeta from '../models/job_meta'\nimport Filters from '../models/filters'\nimport Item from '../components/jobs/item'\nimport TreeLeaves from '../components/tree/leaves'\nimport Paginator from '../components/misc/paginator'\nimport FiltersComponent from '../components/jobs/filters'\n\ntype Props = {\n  viewJSONlikeAPro?: boolean\n  jobMetas?: JobMeta[]\n  roots?: Job[]\n  index?: (filters: Filters, params: { page: number }) => any\n  changeViewJSONlikeAPro?: (newValue: boolean) => any\n}\ntype State = {\n  filters: Filters\n  loading: boolean\n  page: number\n  maxPage: number\n}\n\nclass RootsList extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n\n    this.state = {\n      loading: true,\n      page: 1,\n      maxPage: 1,\n      filters: {}\n    }\n    \n    this.onPageChange = this.onPageChange.bind(this)\n    this.onFiltersChange = this.onFiltersChange.bind(this)\n  }\n\n  componentDidMount() {\n    this.loadItems(1).then(() => {})\n  }\n\n  render() {\n    const { roots } = this.props\n    const { loading, page, maxPage } = this.state\n\n    if (loading) {\n      return (\n        <div className=\"d-flex w-100 h-100\">\n          <div className=\"m-auto\">Loading</div>\n        </div>\n      )\n    }\n\n    return (\n      <>\n        <div  className=\"jumbotron p-2 m-1 d-flex align-items-center\">\n          <div className=\"form-check form-check-inline flex-fill\">\n            <input \n              className=\"form-check-input\"\n              type=\"checkbox\"\n              defaultChecked={this.props.viewJSONlikeAPro}\n              id=\"viewJSONlikeAPro\"\n              onChange={event => {\n                this.props.changeViewJSONlikeAPro!(event.currentTarget.checked)\n              }}\n            />\n            <label className=\"form-check-label\" htmlFor=\"viewJSONlikeAPro\">\n              View JSON like a pro\n            </label>\n          </div>\n          <FiltersComponent\n            value={this.state.filters}\n            onChange={this.onFiltersChange}\n          /> \n          <RouterLink to={\"/new\"} className=\"btn btn-light\">\n            <PlusCircle/>\n          </RouterLink>\n        </div>\n        \n        <TreeLeaves\n          items={roots! || []}\n          builder={Item}\n        />\n        <Paginator page={page} maxPage={maxPage} onPageChange={this.onPageChange}/>\n      </>)\n  }\n\n  private onPageChange(newPage: number) {\n    this.loadItems(newPage).then(() => {})\n  }\n\n  private async loadItems(page: number) {\n    const { filters, maxPage } = this.state\n    await this.props.index!(filters, { page })\n    this.setState({\n      loading: false,\n      page,\n      maxPage: Math.max(maxPage, page + 1),\n    })\n  }\n\n  private onFiltersChange(filters: Filters) {\n    this.setState({\n      filters\n    }, () => {\n      this.loadItems(1).then(() => {})\n    })\n  }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: Props) => ({\n  roots: state.jobs,\n  jobMetas: state.jobMetas,\n  viewJSONlikeAPro: state.app.viewJSONlikeAPro,\n})\nconst mapDispatchToProps = (dispatch: any, ownProps: Props) => ({\n  index: (filters: Filters, params: { page: number }) => dispatch(Actions.index(filters, params)),\n  changeViewJSONlikeAPro: (newValue: boolean) => dispatch(AppActions.changeViewJSONlikeAPro(newValue))\n})\n\nexport default ReactRedux.connect(mapStateToProps, mapDispatchToProps)(RootsList)","import React from 'react'\nimport * as ReactRedux from 'react-redux'\nimport ReduxState from '../redux/state'\nimport Actions from '../redux/actions/jobs'\nimport { Link as RouterLink } from 'react-router-dom'\nimport { PlusCircle } from 'react-bootstrap-icons'\n\nimport Job from '../models/job'\nimport Filters from '../models/filters'\nimport Item from '../components/jobs/item'\nimport TreeLeaves from '../components/tree/leaves'\nimport FiltersComponent from '../components/jobs/filters'\n\ntype Props = {\n  loadActiveRoots?: (filters: Filters) => Promise<Job[]>\n}\ntype State = {\n  filters: Filters\n  loading: boolean\n  items: Job[]\n}\n\nclass RootsList extends React.Component<Props, State> {\n  private pollInterval: null | ReturnType<typeof window.setInterval> = null\n  private pulseIndicatorEl = React.createRef<HTMLDivElement>()\n\n  constructor(props: Props) {\n    super(props)\n\n    this.state = {\n      loading: true,\n      filters: {},\n      items: [],\n    }\n    \n    this.loadItems = this.loadItems.bind(this)\n    this.touchPulseIndicator = this.touchPulseIndicator.bind(this)\n    this.onFiltersChange = this.onFiltersChange.bind(this)\n  }\n\n  componentDidMount() {\n    this.loadItems()\n    this.pollInterval = window.setInterval(this.loadItems, 2000) as any\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.pollInterval as any)\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"jumbotron p-2 m-1 d-flex align-items-center\">\n          <h3 className=\"flex-fill m-0\">\n            Online&nbsp;\n            <div \n              className=\"d-inline-block pulse-indicator\"\n              ref={this.pulseIndicatorEl}\n            ></div>\n          </h3>\n          <FiltersComponent\n            value={this.state.filters}\n            onChange={this.onFiltersChange}\n          /> \n          <RouterLink to={\"/new\"} className=\"btn btn-light\">\n            <PlusCircle/>\n          </RouterLink>\n        </div>\n        \n        { this.renderPage() }\n      </>)\n  }\n\n  renderPage() {\n    if (this.state.loading) {\n      return (\n        <div className=\"d-flex w-100 h-100\">\n          <div className=\"m-auto\">Loading</div>\n        </div>\n      )\n    }\n\n    return (\n      (this.state.items! || []).map(onlineRoot => (\n        <TreeLeaves\n          items={[onlineRoot]}\n          builder={Item}\n        />\n      ))\n    )\n  }\n\n  private async loadItems() {\n    const items = await this.props.loadActiveRoots!(this.state.filters)\n    this.setState({ \n      loading: false, \n      items,\n    }, this.touchPulseIndicator)\n  }\n\n  private touchPulseIndicator() {\n    this.pulseIndicatorEl.current?.classList.add(\"active\")\n    setTimeout(() => {\n      this.pulseIndicatorEl.current?.classList.remove(\"active\")\n    }, 500)\n  }\n\n  private onFiltersChange(filters: Filters) {\n    this.setState({\n      filters\n    })\n  }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: Props) => ({})\nconst mapDispatchToProps = (dispatch: any, ownProps: Props) => ({\n  loadActiveRoots: (filters: Filters) => dispatch(Actions.loadActiveRoots(filters)),\n})\n\nexport default ReactRedux.connect(mapStateToProps, mapDispatchToProps)(RootsList)","import React from 'react'\n\ntype Props<T> = {\n  label: string\n  defaultValue: T\n  onChange: (newValue: T) => any\n  jsonSchema: any\n}\n\n// No typings\n// Lib loaded in old-school way globaly and binded to `window`\n\nclass MyJSONEditor<T> extends React.Component<Props<T>> {\n  private elRef = React.createRef<HTMLDivElement>()\n  private jsonEditor: any\n\n  constructor(props: Props<T>) {\n    super(props)\n    this.onChange = this.onChange.bind(this)\n  }\n\n  componentDidMount() {\n    this.jsonEditor = new (window as any).JSONEditor(this.elRef.current, {\n      theme: 'bootstrap4',\n      schema: this.props.jsonSchema,\n      disable_array_reorder: true,\n      // disable_edit_json: true,\n      array_controls_top: true,\n      form_name_root: this.props.label,\n      no_additional_properties: true,\n      show_errors: 'always',\n      object_layout: 'table',\n      remove_empty_properties: false,\n    });\n\n    this.jsonEditor.setValue(this.props.defaultValue)\n    this.jsonEditor.on('change', this.onChange);\n  }\n\n  render() {\n    return (\n      <div ref={this.elRef}/>)\n  }\n\n  onChange() {\n    const value = this.jsonEditor.getValue()\n    this.props.onChange(value)\n  }\n}\n\nexport default MyJSONEditor","import React from 'react'\nimport * as ReactRedux from 'react-redux'\nimport ReduxState from './../redux/state'\n\nimport JobMeta from '../models/job_meta'\nimport { Form, Button } from 'react-bootstrap'\nimport JsonEditor from './../components/misc/json_editor'\n\nimport Actions from '../redux/actions/jobs'\n\ntype Props = {\n  jobMetas?: JobMeta[]\n  runJob?: (sid: string, input: any) => Promise<any>\n}\n\ntype State = {\n  jobSID?: string\n  input?: any\n}\n\nclass App extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    this.state = {}\n    this.onJobSIDChange = this.onJobSIDChange.bind(this)\n    this.onSubmit = this.onSubmit.bind(this)\n  }\n\n  render() {\n    const sortedJobMetas = (this.props.jobMetas || []).sort(function (a, b) {\n      return a.Title.localeCompare(b.Title);\n    })\n\n    return (\n      <>\n        <h3>Run new job</h3>\n        <Form onSubmit={this.onSubmit}>\n          <Form.Group>\n            <Form.Label>SID</Form.Label>\n            <Form.Control as=\"select\" custom\n              onChange={this.onJobSIDChange}\n            >\n              <option className=\"text-muted\" value=\"\">Choose job to create</option>\n              {sortedJobMetas.map(jobMeta => {\n                return (<option value={jobMeta.SID}>{jobMeta.Title}</option>)\n              })}\n            </Form.Control>\n          </Form.Group>\n          <Form.Group>\n            {this.renderInputEditor()}\n\n            <blockquote className=\"blockquote\">\n              <p className=\"mb-0\">{JSON.stringify(this.state.input)}</p>\n              <footer className=\"blockquote-footer\">would be sent as job input</footer>\n            </blockquote>\n            \n          </Form.Group>\n          <Button variant=\"light\" type=\"submit\" className=\"w-100\">\n            Submit\n          </Button>\n        </Form>\n      </>\n    );\n  }\n\n  renderInputEditor() {\n    const { jobSID } = this.state\n    const jobMeta = (this.props.jobMetas || []).find(c => c.SID === jobSID)\n    if (!jobMeta) { return }\n\n    if (!jobMeta.InputJSONSchema) {\n      return (\n        <div className=\"alert alert-primary\">\n          No input JSON schema defined for this Job\n        </div>\n      )\n    }\n\n    const jsonSchema = JSON.parse(jobMeta.InputJSONSchema!)\n    return (\n      <JsonEditor\n        label=\"Input\"\n        jsonSchema={jsonSchema}\n        defaultValue={this.state.input}\n        onChange={newValue => {\n          this.setState({\n            input: newValue\n          })\n        }}\n      />\n    )\n  }\n\n  private async onSubmit(event: React.SyntheticEvent<HTMLFormElement>) {\n    event.preventDefault()\n\n    const response = await this.props.runJob!(this.state.jobSID!, this.state.input)\n    alert(`Job has started`)\n    window.location.reload()\n    \n    return false\n  }\n\n  private onJobSIDChange(event: React.ChangeEvent<HTMLSelectElement>) {\n    const jobSID = event.target.value\n    if (jobSID === \"\") {\n      this.setState({ jobSID: undefined })\n    } else {\n      this.setState({ jobSID })\n    }\n  }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: Props) => ({\n  jobMetas: state.jobMetas,\n})\nconst mapDispatchToProps = (dispatch: any, ownProps: Props) => ({\n  runJob: (sid: string, input: any) => dispatch(Actions.run(sid, input)),\n})\n\nexport default ReactRedux.connect(mapStateToProps, mapDispatchToProps)(App)\n","import API from './api'\nimport HTTP from '../lib/http'\n\nimport Scheduler from '../models/scheduler'\n\nasync function index() {\n    const data = Object.assign({}, {})\n    const url = API.URLS.schedulers.index\n    const response = await HTTP.get(url, data)\n    const items = (response as any[]).map(props => new Scheduler(props))\n    return items\n}\n\nasync function create(scheduler: Scheduler) {\n    const data = Object.assign({}, scheduler)\n    const url = API.URLS.schedulers.create\n    await HTTP.post(url, data)\n}\n\nasync function update(scheduler: Scheduler) {\n    const data = Object.assign({}, scheduler)\n    const url = API.URLS.schedulers.update(scheduler.ID)\n    await HTTP.post(url, data)\n}\n\nasync function show(id: number) {\n    const data = Object.assign({}, {})\n    const url = API.URLS.schedulers.show(id)\n    const response = await HTTP.get(url, data)\n    return new Scheduler(response)\n}\n\nasync function destroy(scheduler: Scheduler) {\n    const url = API.URLS.schedulers.destroy(scheduler.ID)\n    await HTTP.del(url)\n}\n\nexport default { index, create, destroy, update, show }","import ReduxState from '../state'\n\nimport Schedulers from '../../services/schedulers'\nimport Scheduler from \"../../models/scheduler\";\n\n// Action creators\n\nfunction index() {\n\treturn async (dispatch: any, getState: () => ReduxState) => {\n\t\tconst schedulers = await Schedulers.index()\n\t\treturn schedulers\n\t}\n}\n\nfunction create(scheduler: Scheduler) {\n\treturn async (dispatch: any, getState: () => ReduxState) => {\n\t\tawait Schedulers.create(scheduler)\n\t}\n}\n\nfunction update(scheduler: Scheduler) {\n\treturn async (dispatch: any, getState: () => ReduxState) => {\n\t\tawait Schedulers.update(scheduler)\n\t}\n}\n\nfunction show(id: number) {\n\treturn async (dispatch: any, getState: () => ReduxState) => {\n\t\tconst scheduler = await Schedulers.show(id)\n\t\treturn scheduler\n\t}\n}\n\nfunction destroy(scheduler: Scheduler) {\n\treturn async (dispatch: any, getState: () => ReduxState) => {\n\t\tawait Schedulers.destroy(scheduler)\n\t}\n}\n\nexport default { index, create, destroy, update, show }","import React from 'react'\nimport * as ReactRedux from 'react-redux'\nimport { Link } from 'react-router-dom'\n\nimport ReduxState from './../../redux/state'\nimport Actions from '../../redux/actions/schedulers'\n\nimport ReactJsonView from 'react-json-view'\nimport { Button } from 'react-bootstrap'\nimport { Trash, PauseCircle, PencilSquare } from 'react-bootstrap-icons'\nimport HumanDuration from '../../components/misc/human_duration'\n\nimport Scheduler, { SchedulerType } from '../../models/scheduler'\n\ntype Props = {\n    item: Scheduler\n    destroy?: (item: Scheduler) => any\n}\n\ntype State = {}\n\nclass JobComponent extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n\n        this.state = {}\n\n        this.destroy = this.destroy.bind(this)\n    }\n\n    render() {\n        const { item } = this.props\n        const input = JSON.parse(item.JobInput)\n\n        return (\n            <div className=\"card w-100\">\n                <div className=\"card-body d-flex align-items-center\">\n                    <span>\n                        {item.JobType}&nbsp;\n                        { item.SchedulerType === SchedulerType.Timer && (\n                            <>every <HumanDuration seconds={item.RunEverySeconds}/></>\n                        ) }\n                        { item.SchedulerType === SchedulerType.ExactTime && (\n                            <>at {JSON.stringify(item.ExactTimes)}</>\n                        ) }\n                    </span>\n                    <div className=\"flex-fill\">\n                        <ReactJsonView src={input} collapsed={true} style={{fontSize: 10}} displayDataTypes={false}/>\n                    </div>\n                    { !!item.Stopped && <PauseCircle/> }\n                    <span>{item.LastRunAt}</span>\n                    { !!item.LastError && <div className=\"alert alert-danger\">{item.LastError}</div> }\n\n                    <Link to={`/schedulers/edit/${item.ID}`}><PencilSquare/></Link>\n\n                    <Button variant=\"light\" onClick={this.destroy}\n                    ><Trash/></Button>\n                </div>\n            </div>)\n    }\n\n    private destroy() {\n        if (window.confirm('Do you wanna to destroy?') === false) {\n            return\n        }\n        this.props.destroy!(this.props.item)\n    }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: Props) => ({})\nconst mapDispatchToProps = (dispatch: any, ownProps: Props) => ({\n    destroy: (item: Scheduler) => dispatch(Actions.destroy(item))\n})\n\nexport default ReactRedux.connect(mapStateToProps, mapDispatchToProps)(JobComponent)","import React from 'react'\nimport * as ReactRedux from 'react-redux'\nimport ReduxState from './../redux/state'\n\nimport {Link as RouterLink, Link} from 'react-router-dom'\nimport { PlusCircle } from 'react-bootstrap-icons'\n\nimport SchedulerActions from '../redux/actions/schedulers'\nimport Scheduler from \"../models/scheduler\"\n\nimport ItemComponent from '../components/schedulers/item'\n\ntype Props = {\n    indexSchedulers?: () => Promise<Scheduler[]>\n}\ntype State = {\n    schedulers: Scheduler[]\n}\n\nclass App extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            schedulers: []\n        }\n    }\n\n    async componentDidMount() {\n        const schedulers = await this.props.indexSchedulers!()\n        this.setState({ schedulers })\n    }\n\n    render() {\n        const { schedulers } = this.state\n\n\n        return (\n            <>\n                <div className=\"jumbotron p-2 m-1 d-flex align-items-center\">\n                    <span className=\"flex-fill\">Schedulers</span>\n                    <RouterLink to={\"/schedulers/new\"} className=\"btn btn-light\">\n                        <PlusCircle/>\n                    </RouterLink>\n                </div>\n                { schedulers.map(scheduler => (\n                    <ItemComponent item={scheduler}/>\n                )) }\n            </>\n        );\n    }\n};\n\nconst mapStateToProps = (state: ReduxState, ownProps: Props) => ({})\nconst mapDispatchToProps = (dispatch: any, ownProps: Props) => ({\n    indexSchedulers: () => dispatch(SchedulerActions.index())\n})\n\nexport default ReactRedux.connect(mapStateToProps, mapDispatchToProps)(App)\n","import React from 'react'\nimport * as ReactRedux from 'react-redux'\n\nimport ReduxState from './../../redux/state'\nimport AppActions, { Hello } from '../../redux/actions/app'\n\nimport { Clock } from 'react-bootstrap-icons'\n\ntype Props = {\n    hello?: () => Promise<Hello>\n}\n\ntype State = {\n  serverTime: string\n}\n\nclass ServerTime extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n\n        this.state = {\n          serverTime: \"\"\n        }\n    }\n\n    async componentDidMount() {\n      const hello = await this.props.hello!()\n      this.setState({\n        serverTime: hello.ServerTime\n      })\n    }\n\n    render() {\n        return (\n            <div>Server<Clock/>&nbsp;{this.state.serverTime}</div>)\n    }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: Props) => ({})\nconst mapDispatchToProps = (dispatch: any, ownProps: Props) => ({\n    hello: () => dispatch(AppActions.hello())\n})\n\nexport default ReactRedux.connect(mapStateToProps, mapDispatchToProps)(ServerTime)","import React from 'react'\nimport * as ReactRedux from 'react-redux'\nimport ReduxState from './../../redux/state'\n\nimport JobMeta from '../../models/job_meta'\nimport { Form, Button } from 'react-bootstrap'\nimport JsonEditor from '../misc/json_editor'\nimport HumanDuration from '../../components/misc/human_duration'\nimport ServerTime from '../../components/misc/server_time'\n\nimport Scheduler, { SchedulerType } from \"../../models/scheduler\";\n\ntype Props = {\n    jobMetas?: JobMeta[]\n    value: Scheduler\n    onChange: (newValue: Scheduler) => any\n}\n\ntype State = {}\n\nclass SchedulerForm extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n        this.state = {}\n        this.onChange = this.onChange.bind(this)\n    }\n\n    render() {\n        const { value } = this.props\n        const sortedJobMetas = (this.props.jobMetas || []).sort(function (a, b) {\n            return a.Title.localeCompare(b.Title);\n        })\n\n        return (\n            <div>\n                <Form.Group>\n                    <Form.Label>SID</Form.Label>\n                    <Form.Control as=\"select\" custom\n                                  value={value.JobType}\n                                  onChange={e => {\n                                      value.JobType = e.currentTarget.value\n                                      this.onChange(value)\n                                  }}\n                    >\n                        <option className=\"text-muted\" value=\"\">Choose job to create</option>\n                        {sortedJobMetas.map(jobMeta => {\n                            return (<option value={jobMeta.SID}>{jobMeta.Title}</option>)\n                        })}\n                    </Form.Control>\n                </Form.Group>\n                <Form.Group>\n                    {this.renderInputEditor()}\n\n                    <blockquote className=\"blockquote\">\n                        <p className=\"mb-0\">{JSON.stringify(value.JobInput)}</p>\n                        <footer className=\"blockquote-footer\">job input</footer>\n                    </blockquote>\n\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>SchedulerType</Form.Label>\n                    <div className=\"btn-group\">\n                        <button \n                            className={`btn btn-${value.SchedulerType === SchedulerType.Timer ? 'success' : 'primary'}`}\n                            onClick={e => {\n                                value.SchedulerType = SchedulerType.Timer\n                                this.onChange(value)\n                            }}\n                        >Timer</button>\n                        <button \n                            className={`btn btn-${value.SchedulerType === SchedulerType.ExactTime ? 'success' : 'primary'}`}\n                            onClick={e => {\n                                value.SchedulerType = SchedulerType.ExactTime\n                                this.onChange(value)\n                            }}\n                        >ExactTime</button>\n                    </div>\n                </Form.Group>\n                { (value.SchedulerType === SchedulerType.Timer) && (\n                    <Form.Group>\n                        <Form.Label>RunEverySeconds</Form.Label>\n                        <Form.Control type=\"number\"\n                                    value={value.RunEverySeconds}\n                                    onChange={e => {\n                                        value.RunEverySeconds = parseInt(e.currentTarget.value, 10)\n                                        this.onChange(value)\n                                    }}\n                        />\n                        <blockquote className=\"blockquote\">\n                            <HumanDuration seconds={value.RunEverySeconds}/>\n                        </blockquote>\n                    </Form.Group>) }\n                { (value.SchedulerType === SchedulerType.ExactTime) && (\n                    <div className=\"row\">\n                        <div className=\"col-md-9\">\n                            <Form.Group>\n                                <Form.Label>ExactTimes</Form.Label>\n                                <Form.Control\n                                    value={value.ExactTimes.join(\", \")}\n                                    onChange={e => {\n                                        value.ExactTimes = e.currentTarget.value.split(\", \").map(s => s.trim())\n                                        this.onChange(value)\n                                    }}\n                                />\n                                <blockquote className=\"blockquote\">\n                                    {JSON.stringify(value.ExactTimes)}\n                                </blockquote>\n                            </Form.Group>\n                        </div>\n                        <div className=\"col-md-3\">\n                            <ServerTime/>\n                        </div>\n                    </div>\n                    ) }\n                \n                <Form.Group>\n                    <Form.Check type=\"checkbox\" label=\"Stopped\"\n                        checked={value.Stopped}\n                        onChange={e => {\n                            value.Stopped = e.currentTarget.checked\n                            this.onChange(value)\n                        }}\n                    />\n                </Form.Group>\n            </div>\n        );\n    }\n\n    renderInputEditor() {\n        const { value } = this.props\n        if (!value.JobType) { return null }\n\n        const jobMeta = (this.props.jobMetas || []).find(c => c.SID === value.JobType)\n        if (!jobMeta) { return }\n\n        if (!jobMeta.InputJSONSchema) {\n            return (\n                <div className=\"alert alert-primary\">\n                    No input JSON schema defined for this Job\n                </div>\n            )\n        }\n\n        const jsonSchema = JSON.parse(jobMeta.InputJSONSchema!)\n        return (\n            <JsonEditor\n                key={`${value.ID}-${value.JobType}`}\n                label=\"Input\"\n                jsonSchema={jsonSchema}\n                defaultValue={JSON.parse(value.JobInput || \"{}\")}\n                onChange={newValue => {\n                    value.JobInput = JSON.stringify(newValue)\n                    this.onChange(value)\n                }}\n            />\n        )\n    }\n\n    onChange(model: Scheduler) {\n        const clone = new Scheduler(model)\n        this.props.onChange(clone)\n    }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: Props) => ({\n    jobMetas: state.jobMetas,\n})\nconst mapDispatchToProps = (dispatch: any, ownProps: Props) => ({})\n\nexport default ReactRedux.connect(mapStateToProps, mapDispatchToProps)(SchedulerForm)\n","import React from 'react'\nimport * as ReactRedux from 'react-redux'\nimport ReduxState from './../redux/state'\nimport * as ReactRouter from 'react-router'\n\nimport { Button } from 'react-bootstrap'\n\nimport Form from '../components/schedulers/form'\n\nimport Actions from '../redux/actions/schedulers'\nimport Scheduler from \"../models/scheduler\";\n\ntype Props = {\n  create?: (scheduler: Scheduler) => Promise<any>\n} & ReactRouter.RouteComponentProps<{}>\n\ntype State = {\n  model: Scheduler\n}\n\nclass App extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    this.state = {\n      model: new Scheduler({\n        Stopped: false,\n        ExactTimes: [],\n      })\n    }\n    this.onSubmit = this.onSubmit.bind(this)\n    this.onChange = this.onChange.bind(this)\n  }\n\n  render() {\n    const { model } = this.state\n\n    return (\n      <>\n        <h3>Create scheduler</h3>\n        <Form\n          value={model}\n          onChange={this.onChange}\n        />\n        <Button variant=\"light\" className=\"w-100\"\n          onClick={this.onSubmit}\n        >\n          Create\n        </Button>\n      </>\n    );\n  }\n\n  onChange(model: Scheduler) {\n    this.setState({\n      model\n    })\n  }\n\n  private async onSubmit() {\n    await this.props.create!(this.state.model)\n    alert(\"Done, sir!\")\n    this.props.history.push(`/schedulers/index`)\n  }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: Props) => ({})\nconst mapDispatchToProps = (dispatch: any, ownProps: Props) => ({\n  create: (scheduler: Scheduler) => dispatch(Actions.create(scheduler)),\n})\n\nexport default ReactRedux.connect(mapStateToProps, mapDispatchToProps)(App)\n","import React from 'react'\nimport * as ReactRedux from 'react-redux'\nimport ReduxState from './../redux/state'\nimport * as ReactRouter from 'react-router'\n\nimport { Button } from 'react-bootstrap'\n\nimport Form from '../components/schedulers/form'\n\nimport Actions from '../redux/actions/schedulers'\nimport Scheduler from \"../models/scheduler\";\n\ntype Props = {\n    show?: (id: number) => Promise<Scheduler>\n    update?: (scheduler: Scheduler) => Promise<any>\n} & ReactRouter.RouteComponentProps<{\n    id: string\n}>\n\ntype State = {\n    model: Scheduler\n}\n\nclass App extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n        this.state = {\n            model: new Scheduler({})\n        }\n        this.onSubmit = this.onSubmit.bind(this)\n        this.onChange = this.onChange.bind(this)\n    }\n\n    async componentDidMount() {\n        const idStr = this.props.match.params.id\n        const id = parseInt(idStr, 10)\n        const model = await this.props.show!(id)\n        this.setState({ model })\n    }\n\n    render() {\n        const { model } = this.state\n\n        return (\n            <>\n                <h3>Update scheduler</h3>\n                <Form\n                    value={model}\n                    onChange={this.onChange}\n                />\n                <Button variant=\"light\" className=\"w-100\"\n                        onClick={this.onSubmit}\n                >\n                    Update\n                </Button>\n            </>\n        );\n    }\n\n    onChange(model: Scheduler) {\n        this.setState({\n            model\n        })\n    }\n\n    private async onSubmit() {\n        await this.props.update!(this.state.model)\n        alert(\"Done, sir!\")\n        this.props.history.push(`/schedulers/index`)\n    }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: Props) => ({})\nconst mapDispatchToProps = (dispatch: any, ownProps: Props) => ({\n    show: (id: number) => dispatch(Actions.show(id)),\n    update: (scheduler: Scheduler) => dispatch(Actions.update(scheduler)),\n})\n\nexport default ReactRedux.connect(mapStateToProps, mapDispatchToProps)(App)","import React from 'react'\nimport { Switch, Route } from 'react-router'\n\nimport Index from './pages/index'\nimport Online from './pages/online'\nimport New from './pages/new'\nimport SchedulersIndex from './pages/schedulers_index'\nimport SchedulersNew from './pages/schedulers_new'\nimport SchedulersEdit from './pages/schedulers_edit'\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/index\" exact component={Index}/>\n      <Route path=\"/online\" exact component={Online}/>\n      <Route path=\"/new\" exact component={New}/>\n      <Route path=\"/schedulers/index\" exact component={SchedulersIndex}/>\n      <Route path=\"/schedulers/new\" exact component={SchedulersNew}/>\n      <Route path=\"/schedulers/edit/:id\" exact component={SchedulersEdit}/>\n      <Route component={Index}/>\n    </Switch>\n  )\n}\n\nexport default Router","import React from 'react'\nimport * as ReactRedux from 'react-redux'\nimport ReduxState from './redux/state'\n\nimport JobMeta from './models/job_meta'\nimport JobMetaActions from './redux/actions/job_metas'\n\nimport { Row, Col } from 'react-bootstrap'\n\nimport Layout from './components/layout'\nimport Router from './router'\n\nimport { ConnectedRouter } from 'connected-react-router'\nimport { history } from './redux/store'\n\ntype Props = {\n  indexJobMetas?: () => any\n}\nclass App extends React.Component<Props> {\n  componentDidMount() {\n    this.props.indexJobMetas!()\n  }\n\n  render() {\n    return (\n      <ConnectedRouter history={history}>\n        <Layout>\n          <Row>\n            <Col md={12} className=\"pt-2\">\n              <Router/>\n            </Col>\n          </Row>\n        </Layout>\n      </ConnectedRouter>\n    );\n  }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: Props) => ({})\nconst mapDispatchToProps = (dispatch: any, ownProps: Props) => ({\n  indexJobMetas: () => dispatch(JobMetaActions.index()),\n})\n\nexport default ReactRedux.connect(mapStateToProps, mapDispatchToProps)(App)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport \"@fontsource/montserrat\"\nimport \"./styles.css\"\n\nimport { Provider } from 'react-redux'\nimport { store } from './redux/store'\n\nimport App from './app';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}